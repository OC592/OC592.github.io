<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>框架篇</title>
      <link href="/2023/11/21/%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%A1%86%E6%9E%B6%E7%AF%87/"/>
      <url>/2023/11/21/%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%A1%86%E6%9E%B6%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="框架篇"><a href="#框架篇" class="headerlink" title="框架篇"></a><center>框架篇</center></h1><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><img src="/img/框架/内容.jpg"><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL篇</title>
      <link href="/2023/11/17/%E9%9D%A2%E8%AF%95%E9%A2%98-MySQL%E7%AF%87/"/>
      <url>/2023/11/17/%E9%9D%A2%E8%AF%95%E9%A2%98-MySQL%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL篇"><a href="#MySQL篇" class="headerlink" title="MySQL篇"></a><center>MySQL篇</center></h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><img src="/img/MySQL/MySQL场景.jpg"><h2 id="MySQL-优化"><a href="#MySQL-优化" class="headerlink" title="MySQL-优化"></a>MySQL-优化</h2><h3 id="在MySQL中，如何定位慢查询"><a href="#在MySQL中，如何定位慢查询" class="headerlink" title="在MySQL中，如何定位慢查询?"></a>在MySQL中，如何定位慢查询?</h3><p>聚合查询<br>多表查询<br>表数据量过大查询<br>深度分页查询</p><p>表象:页面加载过慢、接口压测响应时间过长(超过1s)</p><p>如何定位慢查询 ?<br><strong>方案一：</strong>开源工具<br>调试工具: Arthas<br>运维工具: Prometheus、Skywalking<br><strong>方案二：</strong> MySQL自带慢日志<br>慢查询日志记录了所有执行时间超过指定参数 (long_query_time，单位:秒，默认10秒)的所有SQL语句的日志如果要开启慢查询日志，需要在MySQL的配置文件(&#x2F;etc&#x2F;my.cnf)中配置如下信息:<br>开启MySQL慢日志查询开关<br>slow_query_log&#x3D;1<br>设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>long_query_time&#x3D;2<br>配置完毕之后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息<br>&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p><p><strong>总结：</strong></p><ol><li>介绍一下当时产生问题的场景(我们当时的一个接口测试的时候非常的慢，压测的结果大概5秒钟)</li><li>我们系统中当时采用了运维工具 ( Skywalking )，可以监测出哪个接口，最终因为是sql的问题</li><li>在mysql中开启了慢日志查询，我们设置的值就是2秒，一旦sql执行超过2秒就会记录到日志中(调试阶段)</li></ol><h3 id="那这个SQL语句执行很慢-如何分析呢"><a href="#那这个SQL语句执行很慢-如何分析呢" class="headerlink" title="那这个SQL语句执行很慢,如何分析呢?"></a>那这个SQL语句执行很慢,如何分析呢?</h3><p>一个SQL语句执行很慢, 如何分析<br>可以采用EXPLAIN 或者 DESC命令获取 MySQL 如何执行 SELECT 语句的信息</p><img src="/img/MySQL/慢SQL.jpg">possible_key 当前sql可能会使用到的索引key 当前sql实际命中的索引key_len索占用的大小Extra额外的优化建议通过key和key_len 查看是否可能会命中索引<img src="/img/MySQL/Extra.jpg">type 这条sql的连接的类型，性能由好到差为NULL、system、const、eq_ref、ref、range  index、allsystem：查询系统中的表const：根据主键查询eq_ref：主键索引查询或唯一索引查询ref:索引查询range：范围查询index：索引树扫描all：全盘扫描<p><strong>总结：</strong><br>可以采用MySQL自带的分析工具EXPLAIN<br>通过key和key_len检查是否命中了索引(索引本身存在是否有失效的情况)<br>通过type字段查看sql是否有进一步的优化空间，是否存在全索引扫描或全盘扫描<br>通过extra建议判断，是否出现了回表的情况，如果出现了，可以尝试添加索引或修改返回字段来修复</p><h3 id="了解过索引吗-什么是索引"><a href="#了解过索引吗-什么是索引" class="headerlink" title="了解过索引吗?(什么是索引)"></a>了解过索引吗?(什么是索引)</h3><p>索引(index)是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构(B+树)，这些数据结构以某种方式引用(指向)数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><p><strong>索引的底层数据结构了解过嘛 ?</strong><br>B+树<br>B+Tree是在BTree基础上的一种优化，使其更适合实现外存储索引结构，lnnoDB存储引擎就是用B+Tree实现其索引结构<br>B树与B+树对比:</p><ol><li>磁盘读写代价B+树更低;</li><li>查询效率B+树更加稳定;</li><li>B+树便于扫库和区间查询</li></ol><p><strong>总结：</strong><br>索引(index)是帮助MySQL高效获取数据的数据结构(有序)<br>提高数据检索的效率，降低数据库的IO成本(不需要全表扫描)<br>通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗</p><p>MySQL的InnoDB引采用的B+树的数据结构来存储索引<br>阶数更多，路径更短<br>磁盘读写代价B+树更低，非叶子节点只存储指针，叶子阶段存储数据<br>B+树便于扫库和区间查询，叶子节点是一个双向链表</p><h3 id="什么是聚簇索引什么是非聚簇索引"><a href="#什么是聚簇索引什么是非聚簇索引" class="headerlink" title="什么是聚簇索引什么是非聚簇索引?"></a>什么是聚簇索引什么是非聚簇索引?</h3><p>什么是聚集索引，什么是二级索引(非聚集索引)<br>什么是回表?<br><img src="/img/MySQL/聚集索引.jpg"></p><p><strong>聚集索引选取规则:</strong><br>如果存在主键，主键索引就是聚集索引。<br>如果不存在主键，将使用第一个唯一(UNIQUE)索作为聚集索引。<br>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</p><p><strong>总结：</strong><br>聚簇索引(聚集索引):数据与索引放到一块，B+树的叶子节点保存了整行数据，有且只有一个<br>非聚簇索引(二级索引):数据与索引分开存储，B+树的叶子节点保存对应的主键，可以有多个<br>通过二级索引找到对应的主键值，到聚集索引中查找整行数据，这个过程就是回表</p><h3 id="知道什么叫覆盖索引嘛"><a href="#知道什么叫覆盖索引嘛" class="headerlink" title="知道什么叫覆盖索引嘛?"></a>知道什么叫覆盖索引嘛?</h3><p><strong>覆盖索引</strong>是指查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到</p><h3 id="MYSQL超大分页怎么处理"><a href="#MYSQL超大分页怎么处理" class="headerlink" title="MYSQL超大分页怎么处理 ?"></a>MYSQL超大分页怎么处理 ?</h3><p>可以使用覆盖索引解决<br>在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低。<br>因为，当在进行分页查询时，如果执行 limit 9000000,10，此时需要MySQL排序前9000010 记录，仅仅返回9000000- 9000010 的记录，其他记录丢弃，查询排序的代价非常大。</p><p>优化思路: 一般分页查询时，通过创建 覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p><strong>总结：</strong><br>覆盖索引是指查询使用了索引，返回的列，必须在索引中全部能够找到</p><ol><li>使用id查询，直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。</li><li>如果返回的列中没有创建索引，有可能会触发回表查询，尽量避免使用select *<br>MYSQL超大分页怎么处理?<br>在数据量比较大时，limit分页查询，需要对数据进行排序，效率低题:<br>覆盖索引+子查询</li></ol><h3 id="索引创建原则有哪些？"><a href="#索引创建原则有哪些？" class="headerlink" title="索引创建原则有哪些？"></a>索引创建原则有哪些？</h3><ol><li>先陈述自己在实际的工作中是怎么用的</li><li>主键索</li><li>唯一索引</li><li>根据业务创建的索(复合索引)</li></ol><p><strong>索引创建原则有哪些？</strong><br><strong>1).</strong> 针对于数据量较大，且查询比较频繁的表建立索引。单表超过10万数据(增加用户体验)<br><strong>2).</strong> 针对于常作为查询条件 (where)、排序 (order by)、分组 (group by) 操作的字段建立索引。<br><strong>3).</strong> 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。<br><strong>4).</strong> 如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。<br><strong>5).</strong> 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。<br><strong>6).</strong> 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。<br><strong>7).</strong> 如果索引列不能存储NULL值，请在创建表时使用NOT ULL约束。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</p><p><strong>总结：</strong><br>1).数据量较大，且查询比较频繁的表      <strong>重要</strong><br>2).常作为查询条件、排序、分组的字段    <strong>重要</strong><br>3).字段内容区分度高<br>4).内容较长，使用前缀索引<br>5).尽量联合索                        <strong>重要</strong><br>6).要控制索引的数量                   <strong>重要</strong><br>7)如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它</p><h3 id="什么情况下索引会失效？"><a href="#什么情况下索引会失效？" class="headerlink" title="什么情况下索引会失效？"></a>什么情况下索引会失效？</h3><p>索引失效的情况有很多，可以说一些自己遇到过的，不要张口就得得得说一堆背诵好的面试题(适当的思考一下，回想一下，更真实)<br>给tb seller创建联合索引，字段顺序: name，status，address<br><img src="/img/MySQL/索引.jpg"></p><p>那快读判断索引是否失效了呢?    执行计划explain<br><strong>1).违反最左前缀法则</strong><br>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。匹配最左前缀法则，走索引；<br><img src="/img/MySQL/正例索引.jpg"><br>违反最左前缀法则，索引失效：<br><img src="/img/MySQL/反例索引.jpg"><br>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：<br><img src="/img/MySQL/最左法则.jpg"></p><p><strong>2).范围查询右边的列，不能使用索引。</strong><br><img src="/img/MySQL/范围右边列.jpg"><br>根据前面的两个字段 name，status 查询是走索引的，但是最后一个条件address 没有用到索引</p><p><strong>3).不要在索引列上进行运算操作，索引将失效</strong><br><img src="/img/MySQL/运算失效.jpg"></p><p><strong>4).字符串不加单引号，造成索引失效。</strong><br><img src="/img/MySQL/单引号索引.jpg"><br>由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><p><strong>5).以%开头的Like模糊查询，索引失效。如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</strong><br><img src="/img/MySQL/模糊查询.jpg"></p><p><strong>总结：</strong></p><ol><li>违反最左前缀法则</li><li>范围查询右边的列，不能使用索引</li><li>不要在索引列上进行运算操作， 索引将失效</li><li>字符串不加单引号，造成索引失效。(类型转换)</li><li>以%开头的Like模糊查询，索引失效</li></ol><h3 id="谈一谈你对sql的优化的经验"><a href="#谈一谈你对sql的优化的经验" class="headerlink" title="谈一谈你对sql的优化的经验"></a>谈一谈你对sql的优化的经验</h3><ol><li>表的设计优化</li><li>索引优化   参考优化创建原则和索引失效</li><li>SQL语句优化</li><li>主从复制、读写分离</li><li>分库分表</li></ol><p><strong>表的设计优化(参考阿里开发手册《嵩山版》)</strong></p><ol><li>比如设置合适的数值(tinyint int bigint)，要根据实际情况选择</li><li>比如设置合适的字符串类型(char和varchar) char定长效率高，varchar可变长度，效率稍低</li></ol><p><strong>SQL语句优化</strong></p><ol><li>SELECT语句务必指明字段名称 (避免直接使用select *)</li><li>SQL语句要避免造成索引失效的写法</li><li>尽量用union all代替union union会多一次过滤，效率低</li><li>避免在where子句中对字段进行表达式操作</li><li>Join优化 能用innerjoin 就不用left join right join，如必须使用一定要以小表为驱动，内连接会对两个表进行优化，优先把小表放到外边，把大表放到里边。left join 或 right join，不会重新调整顺序</li></ol><p><strong>主从复制、读写分离</strong><br>如果数据库的使用场景读的操作比较多的时候，为了避免写的操作所造成的性能影响 可以采用读写分离的架构。读写分离解决的是，数据库的写入，影响了查询的效率。<br><img src="/img/MySQL/读写分离.jpg"></p><p><strong>总结：</strong></p><ol><li>表的设计优化，数据类型的选择</li><li>索引优化，索引创建原则</li><li>sql语句优化，避免索引失效，避免使用select *….</li><li>主从复制、读写分离，不让数据的写入，影响读操作</li><li>分库分表</li></ol><h2 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL-事务"></a>MySQL-事务</h2><h3 id="事务的特性是什么-可以详细说一下吗"><a href="#事务的特性是什么-可以详细说一下吗" class="headerlink" title="事务的特性是什么?可以详细说一下吗?"></a>事务的特性是什么?可以详细说一下吗?</h3><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><h3 id="ACID是什么-可以详细说一下吗"><a href="#ACID是什么-可以详细说一下吗" class="headerlink" title="ACID是什么? 可以详细说一下吗?"></a>ACID是什么? 可以详细说一下吗?</h3><ol><li>原子性(Atomicity): 事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性(Consistency): 事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性(lsolation): 数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性 (Durability):事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ol><h3 id="并发事务带来哪些问题-怎么解决这些问题呢-MySQL的默认隔离级别是"><a href="#并发事务带来哪些问题-怎么解决这些问题呢-MySQL的默认隔离级别是" class="headerlink" title="并发事务带来哪些问题? 怎么解决这些问题呢? MySQL的默认隔离级别是?"></a>并发事务带来哪些问题? 怎么解决这些问题呢? MySQL的默认隔离级别是?</h3><ol><li>并发事务问题:脏读、不可重复读、幻读</li><li>隔离级别: 读未提交、读已提交、可重复读、串行化</li></ol><p><strong>并发事务问题</strong><br><strong>脏读</strong>：一个事务读到另外一个事务还没有提交的数据<br><strong>不可重复读</strong>：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。<br><strong>幻读</strong>：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了“幻影”。</p><p><strong>怎么解决并发事务的问题呢?</strong><br>解决方案:对事务进行隔离</p><img src="/img/MySQL/事务隔离.jpg"><p><strong>总结：</strong><br>并发事务带来哪些问题? 怎么解决这些问题呢? MySQL的默认隔离级别是?</p><p>并发事务的问题:</p><ol><li>脏读:一个事务读到另外一个事务还没有提交的数据。</li><li>不可重复读:一个事务先后读取同一条记录，但两次读取的数据不同</li><li>幻读:一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了”幻影”。</li></ol><p>隔离级别:<br>READ UNCOMMITTED 未提交读     脏读、不可重复读、幻读<br>READ COMMITTED 读已提交       不可重复读、幻读<br>REPEATABLE READ 可重复读       幻读<br>SERIALIZABLE 串行化</p><h3 id="undo-log和redo-log的区别"><a href="#undo-log和redo-log的区别" class="headerlink" title="undo log和redo log的区别"></a>undo log和redo log的区别</h3><ol><li><p>缓冲池(bufer pool):主内存中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据(若缓冲池没有数据，则从磁盘加载并缓存)，以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度</p></li><li><p>数据页(page):是lnnoDB 存储引擎磁盘管理的最小单元，每个页的大小默认为 16KB。页中存储的是行数据</p></li></ol><p><strong>redo log</strong><br>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性<br>该日志文件由两部分组成:重做日志缓冲(redo og bufer)以及重做日志文件(redo og fle),前者是在内存中，后者在磁盘中当事务提交之后会把所有修改信息都存到该日志文件中,用于在刷新脏页到磁盘,发生错误时，进行数据恢复使用。</p><p><strong>undo log</strong><br>回滚日志，用于记录数据被修改前的信息，作用包含两个:提供回滚 和 MVCC(多版本并发控制)。undo og和redo log记录物理日志不一样，它是逻辑日志。</p><ol><li>可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然</li><li>当update一条记录时，它记录一条对应相反的update记录。当执行rolback时，就可以从undo og中的逻辑记录读取到相应的内容并进行回滚。<br><strong>undo log可以实现事务的一致性和原子性</strong></li></ol><p><strong>总结：</strong><br>undo log和redo log的区别</p><ol><li><p>redo log:记录的是数据页的物理变化，服务宕机可用来同步数据</p></li><li><p>undo log:记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据</p></li><li><p>redo log保证了事务的持久性，undolog保证了事务的原子性和一致性</p></li></ol><h3 id="好的，事务中的隔离性是如何保证的呢"><a href="#好的，事务中的隔离性是如何保证的呢" class="headerlink" title="好的，事务中的隔离性是如何保证的呢?"></a>好的，事务中的隔离性是如何保证的呢?</h3><p>锁:排他锁(如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁)<br>mvcc:多版本并发控制</p><p><strong>解释一下MVCC</strong><br>全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突</p><p>MVCC的具体实现，主要依赖于数据库记录中的隐式字段、undo log日志、readView。</p><p><strong>MVCC–实现原理</strong></p><ol><li><p>记录中的隐藏字段</p><img src="/img/MySQL/隐藏字段.jpg"></li><li><p>undo log<br>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。<br>当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。<br>而update、delete的时候，产生的undo log日志不仅在回滚时需要，mvcc版本访问也需要，不会立即被删除。</p></li><li><p>undo log版本链</p><img src="/img/MySQL/undolog链.jpg">不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。</li><li><p>readview<br>ReadView(读视图)是 快照读 SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务(未提交的)id。<br><strong>当前读</strong><br>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如:<br>select … lock in share mode(共享锁)，<br>select …for update、<br>update、 insert、 delete(排他锁)都是一种当前读。</p></li></ol><p><strong>快照读</strong><br>简单的select(不加锁)就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。<br>Read Committed: 每次select，都生成一个快照读。<br>Repeatable Read: 开启事务后第一个select语句才是快照读的地方。</p><p>ReadView中包含了四个核心字段：<br><img src="/img/MySQL/ReadView.jpg"></p><p>版本链数据访问规则：<br>trx_id: 代表是当前事务ID</p><ol><li>trx_id &#x3D;&#x3D; creator_trx_id?可以访问该版本  成立，说明数据是当前这个事务更改的。</li><li>trx_id &lt; min_trx_id?可以访问该版本  成立，说明数据已经提交了。</li><li>trx_id&gt;max_trx_id ?不可以访问该版本  成立，说明该事务是在ReadView生成后才开启。</li><li>min_trx_id &lt;&#x3D;trx_id&lt;&#x3D; max_trx_id?如果trx_id不在m_ids中是可以访问该版本的     成立，说明数据已经提交。<img src="/img/MySQL/图.jpg"></li></ol><p>不同的隔离级别，生成ReadView的时机不同<br>READ COMMITTED: 在事务中每一次执行快照读时生成ReadView。<br>REPEATABLE READ: 仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。</p><p>RC隔离级别下，在事务中每一次执行快照读时生成ReadView。<br><img src="/img/MySQL/读视图.jpg"></p><p><strong>总结：</strong><br>事务中的隔离性是如何保证的呢?(你解释一下MVCC)<br>MySQL中的多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突<br>隐藏字段:<br>trx_id(事务id)，记录每一次操作的事务id，是自增的<br>roll_pointer(回滚指)，指向上一个版本的事务版本记录地址</p><p>undo log:<br>回滚日志，存储老版本数据<br>版本链:多个事务并行操作某一行记录，记录不同事务修改数据的版本，通过roll_pointer指针形成一个链表</p><p>readView解决的是一个事务查询选择版本的问题</p><h2 id="MySQL主从同步原理"><a href="#MySQL主从同步原理" class="headerlink" title="MySQL主从同步原理"></a>MySQL主从同步原理</h2><p>MySQL主从复制的核心就是二进制日志<br>二进制日志(BINLOG)记录了所有的 DDL(数据定义语言)语句和 DML(数据操纵语言)语句，但不包括数据查询SELECT、SHOW)语句</p><ol><li>主库在事务提交时，会把数据变更记录在二进制日志文件 Binog 中</li><li>从库读取主库的二进制日志文件 Binlog，写入到从库的中继日志 Relay Log</li><li>从库重做中继日志中的事件，将改变反映它自己的数据</li></ol><h2 id="你们项目用过分库分表吗"><a href="#你们项目用过分库分表吗" class="headerlink" title="你们项目用过分库分表吗"></a>你们项目用过分库分表吗</h2><p>分库分表的时机</p><ol><li><strong>前提</strong>，项目业务数据逐渐增多，或业务发展比较迅速  单表的数据量达1000W或20G以后</li><li>优化已解决不了性能问题(主从读写分离、查询索引…)</li><li>IO瓶颈 (磁盘IO、网络IO)、CPU瓶颈(聚合查询、连接数太多)</li></ol><img src="/img/MySQL/拆分策略.jpg"><p><strong>垂直分库</strong><br>垂直分库:以表为依据，根据业务将不同表拆分到不同库中。<br><img src="/img/MySQL/垂直分库.jpg"><br>特点:</p><ol><li>按业务对数据分级管理、维护、监控、扩展</li><li>在高并发下，提高磁盘IO和数据量连接数</li></ol><p><strong>垂直分表</strong><br>垂直分表:以字段为依据，根据字段属性将不同字段拆分到不同表中。<br>拆分规则：</p><ol><li>把不常用的字段单独放在一张表</li><li>把text，blob等大字段拆分出来放在附表中<img src="/img/MySQL/垂直分表.jpg">特点:</li><li>冷热数据分离</li><li>减少IO过渡争抢，两表互不影响</li></ol><p><strong>水平分库</strong><br>水平分库:将一个库的数据拆分到多个库中。<br>路由规则：</p><ol><li>根据id节点取模</li><li>按id也就是范围路由，节点1(1-100万)节点2(100万-200万)<img src="/img/MySQL/水平分库.jpg">特点:</li><li>解决了单库大数量，高并发的性能瓶颈问题</li><li>提高了系统的稳定性和可用性</li></ol><p><strong>水平分表</strong><br>水平分表:将一个表的数据拆分到多个表中(可以在同一个库内)。<br><img src="/img/MySQL/水平分表.jpg"><br>特点:</p><ol><li>优化单一表数据量过大而产生的性能问题;</li><li>避免10争抢并减少锁表的几率;</li></ol><p>分库分表的策略有哪些<br><strong>新的问题和新的技术</strong><br>分库之后的问题:</p><ol><li>分布式事务一致性问题</li><li>跨节点关联查询</li><li>跨节点分页、排序函数</li><li>主键避重</li></ol><p>分库分表中间件:</p><ol><li>sharding-sphere</li><li>mycat<img src="/img/MySQL/分库分表.jpg"></li></ol><p><strong>总结：</strong><br>业务介绍：</p><ol><li>根据自己简历上的项目，想一个数据量较大业务(请求数多或业务累积大)</li><li>达到了什么样的量级(单表1000万或超过20G)<br>具体拆分策略：<br>1，水平分库，将一个库的数据拆分到多个库中，解决海量数据存储和高并发的问题<br>2，水平分表，解决单表存储和性能的问题<br>3，垂直分库，根据业务进行拆分，高并发下提高磁盘IO和网络连接数<br>4，垂直分表，冷热数据分离，多表互不影响</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis篇</title>
      <link href="/2023/11/15/%E9%9D%A2%E8%AF%95%E9%A2%98-Redis%E7%AF%87/"/>
      <url>/2023/11/15/%E9%9D%A2%E8%AF%95%E9%A2%98-Redis%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis篇"><a href="#Redis篇" class="headerlink" title="Redis篇"></a><center>Redis篇</center></h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><img src="/img/Redis/redis-场景1.jpg"><img src="/img/Redis/redis-场景2.jpg"><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><img src="/img/Redis/缓存穿透.jpg"><p><strong>缓存穿透</strong>：查询一个不存在的数据，mysql查询不到数据页不会直接写入缓存，就会导致每次请求都查询数据库。<br><strong>解决方案一：</strong>缓存空数据，查询返回的数据为空，扔把这个空结果进行缓存<br>优点：简单<br>缺点：消耗内存，可能会发生不一致的问题</p><img src="/img/Redis/缓存穿透-布隆.jpg"><p><strong>解决方案二：</strong>布隆过滤器<br>优点：内存占用较少，没有多余key<br>缺点：实现复杂，存在误判</p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><img src="/img/Redis/缓存击穿.jpg"><p><strong>缓存击穿：</strong>给某一个key设置了过期时间，当key过期的时候，恰好这时间点对这个key有大量的并发请求过来，这些并发的请求可能会瞬间把DB压垮<br><strong>解决方案一：</strong> 互斥锁<br><strong>解决方案二：</strong> 逻辑过期</p><img src="/img/Redis/互斥锁.jpg"><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><img src="/img/Redis/缓存雪崩.jpg"><p><strong>缓存雪崩：</strong>是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p><strong>解决方案：</strong> </p><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li> <span style="color:#c00000">哨兵模式、集群模式</span><li>给缓存业务添加降级限流策略</li> <span style="color:#c00000">Nginx、Spring Cloud Gateway</span><li>给业务添加多级缓存</li> <span style="color:#c00000">Guava或Caffeine</span></ul><p><strong>注：降级可做为系统的保底策略，适用于穿透、击穿、雪崩</strong></p><center><p><strong>《缓存三兄弟》</strong><br>穿透无中生有key，布隆过滤null隔离。<br>缓存击穿过期key， 锁与非期解难题。<br>雪崩大量过期key，过期时间要随机。<br>面试必考三兄弟，可用限流来保底。</p></center><h2 id="双写一致性"><a href="#双写一致性" class="headerlink" title="双写一致性"></a>双写一致性</h2><h3 id="redis做为缓存，mysql的数据如何与redis进行同步呢"><a href="#redis做为缓存，mysql的数据如何与redis进行同步呢" class="headerlink" title="redis做为缓存，mysql的数据如何与redis进行同步呢?"></a>redis做为缓存，mysql的数据如何与redis进行同步呢?</h3><p>要根据自己业务背景进行回答：一种<strong>是一致性要求高</strong>，一种<strong>是允许延迟一致</strong><br><strong>双写一致性：</strong>当修改了数据库的数据也要同时更新缓存的数据，缓存和数据库的数据要保持一致<br><img src="/img/Redis/正常情况.jpg"></p><p><strong>读操作：</strong> 缓存命中，直接返回；缓存未命中查询数据库。写入缓存，设定超时时间<br><strong>写操作：</strong> 延迟双删<br><img src="/img/Redis/延迟双删.jpg"><br>1.先删除缓存，还是先修改数据库<br>  答：无论怎么操作都会有脏数据产生。<br>2.为什么要删除两次缓存？<br>  答：为了降低脏数据的产生<br>3.为什么要延迟删除？<br>  答：一般情况下是主从模式 读写分离，要让主延迟一会同步到从数据库中，延迟的过程中 也会有脏数据的风险。<br>可以采用分布式锁</p><p><strong>分布式锁：</strong> 绝对的保证数据的一致性但性能降低<br><img src="/img/Redis/分布式锁.jpg"><br>放入缓存中的数据都是读多写少。</p><p><strong>共享锁:</strong> 读锁readLock，加锁之后，其他线程可以共享读操作。<br><strong>排他锁:</strong> 独占锁writeLock也叫，加锁之后，阻塞其他线程读写操作<br>这样就保证了强一致性，性能也会极大的提升。<br><img src="/img/Redis/排他锁.jpg"><br>代码实现：强一致，性能低<br><img src="/img/Redis/读锁代码实现.jpg"><br><img src="/img/Redis/写锁代码实现.jpg"><br>异步通知保证数据的最终一致性<br><img src="/img/Redis/异步通知.jpg"><br>基于Canal的异步通知：<br><img src="/img/Redis/Canal异步通知.jpg"></p><p>1.介绍自己简历上的业务，我们当时是把文章的热点数据存入到了存中，虽然是热点数据，但是实时要求性并没有那么高，所以，我们当时采用的是异步的方案同步的数据<br>2.我们当时是把抢券的库存存入到了缓存中，这个需要实时的进行数据同步，为了保证数据的强一致我们当时采用的是redisson提供的读写锁来保证数据的同步</p><h3 id="那你来介绍一下异步的方案-你来介绍一下redisson读写锁的这种方案"><a href="#那你来介绍一下异步的方案-你来介绍一下redisson读写锁的这种方案" class="headerlink" title="那你来介绍一下异步的方案(你来介绍一下redisson读写锁的这种方案)"></a>那你来介绍一下异步的方案(你来介绍一下redisson读写锁的这种方案)</h3><p><strong>允许延时一致的业务，采用异步通知</strong><br>1.使用MQ中间中间件，更新数据之后，通知缓存删除<br>2.利用canal中间件，不需要修改业务代码，伪装为mysql的一个从节点，canal通过读取binlog数据更新缓存<br><strong>强一致性的，采用Redisson提供的读写锁</strong><br>1.共享锁: 读锁readLock，加锁之后，其他线程可以共享读操作2.排他锁:独占锁writeLock也叫，加锁之后，阻塞其他线程读写操作</p><h2 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h2><h3 id="redis做为缓存，数据的持久化是怎么做的？"><a href="#redis做为缓存，数据的持久化是怎么做的？" class="headerlink" title="redis做为缓存，数据的持久化是怎么做的？"></a>redis做为缓存，数据的持久化是怎么做的？</h3><p>在Redis提供了两种数据持久化的方式：1、RDB 2、AOF</p><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>RDB全称Redis Database Backup file (Redis数据备份文件)，也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据<br><img src="/img/Redis/RDB.jpg"><br>Redis内部有触发RDB的机制，可以在redis.conf文件中找到，格式如下：<br><strong>900秒内，如果至少有1个key被修改，则执行bgsave</strong><br>save 900 1<br>save 300 10<br>save 60 10000</p><h5 id="RDB执行原理"><a href="#RDB执行原理" class="headerlink" title="RDB执行原理"></a>RDB执行原理</h5><p>bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。<br>fork采用的事copy-on-write技术：<br>当主进程执行读操作时，访问共享内存<br>当主进程执行写操作时，则会拷贝一份数据，并执行写操作。</p><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>AOF全称为Append Only File (追加文件)。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。<br>AOF默认是关闭的，需要修改redis.conf配置文件来开启AOF:<br><strong>是否开启AOF功能，默认是no</strong><br>appendonly yes<br><strong>AOF文件的名称</strong><br>appendfilename “appendonly.aof”<br>AOF的命令记录的频率也可以通过redis.conf文件来配:<br><strong>表示每执行一次写命令，立即记录到AOF文件</strong><br>appendfsvnc alwavs<br><strong>写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</strong><br>appendfsvnc evervsec<br><strong>写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</strong><br>appendfsync no</p><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p><h2 id="Redis-数据过期策略"><a href="#Redis-数据过期策略" class="headerlink" title="Redis 数据过期策略"></a>Redis 数据过期策略</h2><p>假如Redis的key过期之后，会立即删除吗？<br>Redis对数据设置数据的有效时间，数据过期以后，就需要将数据从内存中删除掉。可以按照不同的规则进行<br>删除，这种删除规则就被称之为数据的删除策略 (数据过期策略)<span style="color:#019858">惰性删除，定期删除</span></p><h3 id="Redis数据删除策略-惰性删除"><a href="#Redis数据删除策略-惰性删除" class="headerlink" title="Redis数据删除策略-惰性删除"></a>Redis数据删除策略-惰性删除</h3><p>惰性删除:设置该key过期时间店，我们不去管它，当需要该key时，我们在检查其是否过期，如果过期，我们就删掉它，反之返回该key<br><strong>优点:</strong> 对CPU友好，只会在使用该key时才会进行过期检查，对于很多用不到的key不用浪费时间进行过期检查<br><strong>缺点:</strong> 对内存不友好，如果一个key已经过期，但是一直没有使用，那么该key就会一直存在内存中，内存永远不会释放</p><h3 id="Redis数据删除策略-定期删除"><a href="#Redis数据删除策略-定期删除" class="headerlink" title="Redis数据删除策略-定期删除"></a>Redis数据删除策略-定期删除</h3><p>定期删除:每隔一段时间，我们就对一些key进行检查，删除里面过期的key(从一定数量的数据库中取出一定数量的随机key进行检查，并删除其中的过期key)。<br>定期清理有两种模式：<br><strong>SLOW模式</strong> 是定时任务，执行频率默认为10hz，每次不超过25ms，以通过修改配置文件redis.conf 的hz 选项来调整这个次数<br><strong>FAST模式</strong> 执行频率不固定，每次耗时不超过1ms，但两次间隔不低于2ms<br><strong>优点:</strong> 可以通过限制删除操作执行的时长和频率来减少删除操作对 CPU 的影响。另外定期删除，也能有效释放过期键占用的内存。<br><strong>缺点:</strong> 难以确定删除操作执行的时长和频率<br>Redis的过期删除策略: 惰性删除 + 定期删除两种策略进行配合使用</p><p><strong>假如缓存过多，内存是有限的，内存被占满了怎么办？</strong></p><h2 id="Redis-数据淘汰策略"><a href="#Redis-数据淘汰策略" class="headerlink" title="Redis 数据淘汰策略"></a>Redis 数据淘汰策略</h2><p><strong>数据的淘汰策略:</strong> 当Redis中的内存不够用时，此时在向Redis中添加新的key，那么Redis就会按照某一种规则将内存中的数据删除掉，这种数据的删除规则被称之为内存的淘汰策略。<br><strong>Redis支持8种不同策略来选择要删除的key：</strong><br><strong>noeviction:</strong> 不淘汰任何key，但是内存满时不允许写入新数据，默认就是这种策略。<br><strong>volatile-ttl:</strong> 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰。<br><strong>allkeys-random:</strong> 对全体key，随机进行淘汰。<br><strong>volatile-random:</strong> 对设置了TTL的key ，随机进行淘汰。<br><strong>LRU (Least Recently Used)</strong> 最近最少使用。用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高<br><strong>LFU (Least Frequently Used)</strong> 最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高<br><strong>allkeys-lru:</strong> 对全体key，基于LRU算法进行淘汰<br><strong>volatile-lru:</strong> 对设置了TTL的key，基于LRU算法进行淘汰<br><strong>allkeys-lfu:</strong> 对全体key，基于LFU算法进行淘汰<strong>volatile-lfu:</strong> 对设置了TTL的key，基于LFU算法进行淘汰</p><h3 id="数据淘汰策略-使用建议"><a href="#数据淘汰策略-使用建议" class="headerlink" title="数据淘汰策略-使用建议"></a><span style="color:#ff0000">数据淘汰策略-使用建议</span></h3><p>1.优先使用 alkeys-lru 策略。充分利用 LRU 算法的优势，把最近最常访问的数据留在缓存中。如果业务有明显的冷<br>热数据区分，建议使用。<br>2.如果业务中数据访问频率差别不大，没有明显冷热数据区分,建议使用 allkeys-random，随机选择淘汰。<br>3.如果业务中有置顶的需求，可以使用 volatile-lru 策略，同时置顶数据不设置过期时间，这些数据就一直不被删除会淘汰其他设置过期时间的数据。<br>4.如果业务中有短时高频访问的数据，可以使用 allkeys-lfu 或 volatile-lfu 策略</p><h3 id="关于数据淘汰策略其他的面试问题"><a href="#关于数据淘汰策略其他的面试问题" class="headerlink" title="关于数据淘汰策略其他的面试问题"></a><span style="color:#ff0000">关于数据淘汰策略其他的面试问题</span></h3><p>1.数据库有1000万数据，Redis只能缓存20w数据，如何保证Redis中的数据都是热点数据？<br>使用allkeys-lru(挑选最近最少使用的数据淘汰)淘汰策略，留下来的都是经常访问的热点数据<br>2.Redis的内存用完了会发生什么？<br>主要看数据淘汰策略是什么?如果是默认的配置(noeviction )，会直接报错</p><h2 id="Redis分布式锁，是如何实现的？"><a href="#Redis分布式锁，是如何实现的？" class="headerlink" title="Redis分布式锁，是如何实现的？"></a>Redis分布式锁，是如何实现的？</h2><p>需要结合项目中的业务进行回答，通常情况下，分布式锁使用的场景:<br>集群情况下的定时任务、抢单、幂等性场景</p><h3 id="抢卷场景"><a href="#抢卷场景" class="headerlink" title="抢卷场景"></a><span style="color:#ff0000">抢卷场景</span></h3><img src="/img/Redis/抢卷场景.jpg">**<span style="color:#ff0000">Redis分布式锁</span>**Redis实现分布式锁主要利用Redis的setnx命令。setnx是SET if not exists(如果不存在，则SET)的简写。<p><strong>获取锁：</strong>NX是互斥，EX是设置超时时间<br>SET lock value NX EX 10<br><strong>释放锁：</strong><br>DEL key</p><h4 id="Redis实现分布式锁如何合理的控制锁的有效时长"><a href="#Redis实现分布式锁如何合理的控制锁的有效时长" class="headerlink" title="Redis实现分布式锁如何合理的控制锁的有效时长?"></a>Redis实现分布式锁如何合理的控制锁的有效时长?</h4><p>根据业务执行时间预估   给锁续期</p><h3 id="redisson实现的分布锁–执行流程"><a href="#redisson实现的分布锁–执行流程" class="headerlink" title="redisson实现的分布锁–执行流程"></a>redisson实现的分布锁–执行流程</h3><img src="/img/Redis/redisson-分布式锁.jpg"><h3 id="redisson实现的分布锁–可重入"><a href="#redisson实现的分布锁–可重入" class="headerlink" title="redisson实现的分布锁–可重入"></a>redisson实现的分布锁–可重入</h3><img src="/img/Redis/可重入.jpg"><h3 id="redisson实现的分布锁–主从一致性"><a href="#redisson实现的分布锁–主从一致性" class="headerlink" title="redisson实现的分布锁–主从一致性"></a>redisson实现的分布锁–主从一致性</h3><img src="/img/Redis/主从一致性.jpg"><p>RedLock(红锁): 不能只在一个redis实例上创建锁，应该是在多个redis实例上创建锁(n &#x2F;2 + 1)，避免在一个redis实例上加锁。<br><img src="/img/Redis/红锁.jpg"></p><p><strong>总结：</strong><br><strong>redis分布式锁，是如何实现的?</strong><br>先按照自己简历上的业务进行描述分布式锁使用的场景<br>我们当使用的redisson实现的分布式锁，底层是setnx和lua脚本(保证原子性)</p><p><strong>Redisson实现分布式锁如何合理的控制锁的有效时长?</strong><br>在redisson的分布式锁中，提供了一个WatchDog(看门狗)一个线程获取锁成功以后，WatchDog会给持有锁的线程续期 (默认是每隔10秒续期一次)<br><strong>Redisson的这个锁，可以重入吗?</strong><br>可以重入，多个锁重入需要判断是否是当前线程，在redis中进行存储的时候使用的hash结构来存储线程信息和重入的次数<br><strong>Redisson锁能解决主从数据一致的问题吗</strong><br>不能解决，但是可以使用redisson提供的红锁来解决，但是这样的话，性能就太低了，如果业务中非要保证数据的强一致性，建议采用zookeeper实现的分布式锁</p><h2 id="其他面试题"><a href="#其他面试题" class="headerlink" title="其他面试题"></a>其他面试题</h2><h3 id="Redis集群有哪些方案，知道么"><a href="#Redis集群有哪些方案，知道么" class="headerlink" title="Redis集群有哪些方案，知道么"></a>Redis集群有哪些方案，知道么</h3><p>在Redis中提供的集群方案总共有三种：<br>主从复制<br>哨兵模式<br>分片集群<br>1redis主从数据同步的流程是什么?<br>2怎么保证redis的高并发高可用?<br>3.你们使用red是单点还是集群，哪种集群?<br>4.Redis分片集群中数据是怎么存储和读取的?<br>5.Redis集群脑裂，该怎么解决呢?</p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。<br><img src="/img/Redis/主从复制.jpg"></p><p><span style="color:#ff0000">主从数据同步原理</span><br><strong>主从全量同步：</strong><br>Replication ld:简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid,slave则会继承master节点的replid<br>offset: 偏移量，随着记录在repl baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。<br>如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。<br><img src="/img/Redis/全量同步.jpg"><br><strong>主从增量同步(slave重启或后期数据变化)</strong><br><img src="/img/Redis/增量同步.jpg"></p><p><strong>总结：</strong><br><strong>介绍一下redis的主从同步</strong><br>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。般都是一主多从，主节点负责写数据，从节点负责读数据<br><strong>能说一下，主从同步数据的流程</strong><br><strong>全量同步：</strong><br>1.从节点请求主节点同步数据 (replication id、 offset )<br>2.主节点判断是否是第一次请求，是第一次就与从节点同步版本信息 (replication id和offset)<br>3.主节点执行bgsave，生成rdb文件后，发送给从节点去执行<br>4.在RDB生成执行期间，主节点会以命令的方式记录到缓冲区(一个日志文件)<br>5.把生成之后的命令日志文件发送给从节点进行同步<br><strong>增量同步：</strong><br>1.从节点请求主节点同步数据，主节点判断不是第一次请求，不是第一次就获取从节点的offset值<br>2.主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步</p><h3 id="哨兵的作用"><a href="#哨兵的作用" class="headerlink" title="哨兵的作用"></a>哨兵的作用</h3><p>Redis提供了哨兵 (Sentinel) 机制来实现主从集群的自动故障恢复。哨兵的结构和作用如下<br><strong>监控:</strong> Sentinel 会不断检查您的master和slave是否按预期工作<br><strong>自动故障恢复:</strong> 如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主<br><strong>通知:</strong> Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端</p><h4 id="服务状态监控"><a href="#服务状态监控" class="headerlink" title="服务状态监控"></a><span style="color:#ff0000">服务状态监控</span></h4><p>Sentinel基于心跳机制监测服务状态，每隔1秒向集群的每个实例发送ping命令:<br><strong>主观下线:</strong> 如果某sentinel节点发现某实例未在规定时间响应，则认为该实例<strong>主观下线。</strong><br><strong>客观下线:</strong> 若超过指定数量(quorum)的sentinel都认为该实例<strong>主观下线，</strong>则该实例客观下线。quorum值最好超过Sentinel实例数量的一半。</p><p><strong>哨兵选主规则</strong><br>首先判断主与从节点断开时间长短，如超过指定值就排该从节点<br>然后判断从节点的slave-priority值，越小优先级越高<br>如果slave-prority一样，则判断slave节点的offset值，越大优先级越高<br>最后是判断slave节点的运行id大小，越小优先级越高</p><h4 id="redis集群-哨兵模式-脑裂"><a href="#redis集群-哨兵模式-脑裂" class="headerlink" title="redis集群(哨兵模式)脑裂"></a><span style="color:#ff0000">redis集群(哨兵模式)脑裂</span></h4><p>正常的主从架构：<br><img src="/img/Redis/正常主从架构.jpg"></p><img src="/img/Redis/脑裂.jpg"><p><strong>总结</strong><br><strong>怎么保证Redis的高并发高可用：</strong><br>哨兵模式:实现主从集群的自动故障恢复(监控、自动故障恢复、通知)<br><strong>你们使用redis是单点还是集群，哪种集群</strong><br>主从(1主1从)+哨兵就可以了。单节点不超过10G内存，如果Redis内存不足则可以给不同服务分配独立的Redis主从节点<br><strong>redis集群脑裂，该怎么解决呢?</strong><br>集群脑裂是由于主节点和从节点和sentinel处于不同的网络分区，使得sentinel没有能够心跳感知到主节点，所以通过选举的方式提升了一个从节点为主，这样就存在了两个master，就像大脑分裂了一样，这样会导致客户端还在老的主节点那里写入数据，新节点无法同步数据，当网络恢复后，sentinel会将老的主节点降为从节点，这时再从新master同步数据，就会导致数据丢失<br><strong>解决:</strong> 我们可以修改redis的配置，可以设置最少的从节点数量以及缩短主从数据同步的延迟时间，达不到要求就拒绝请求<br>就可以避免大量的数据丢失</p><h4 id="分片集群结构"><a href="#分片集群结构" class="headerlink" title="分片集群结构"></a><span style="color:#ff0000">分片集群结构</span></h4><p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p><li>海量数据存储问题</li><li>高并发写的问题</li><p>使用分片集群可以解决上述问题，分片集群特征：</p><li>集群中有多个master，每个master保存不同数据</li><li>每个master都可以有多个slave节点</li><li>master之间通过ping监测彼此健康状态</li><li>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</li><h5 id="分片集群结构-数据读写"><a href="#分片集群结构-数据读写" class="headerlink" title="分片集群结构-数据读写"></a><span style="color:#ff0000">分片集群结构-数据读写</span></h5><p>Redis分片集群引入了哈希槽的概念，Redis 集群有16384个哈希槽每个key通过CRC16 校验后对16384 取模来决定放置哪个槽，集群的每个节点负责一部分hash槽</p><p><strong>总结：</strong><br>redis的分片集群有什么作用：</p><li>集群中有多个master，每个master保存不同数据</li><li>每个master都可以有多个slave节点</li><li>master之间通过ping监测彼此健康状态</li><li>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</li><p>Redis分片集群中数据是怎么存储和读取的?</p><li>Redis分片集群引入了哈希槽的概念，Redis 集群有16384个哈希槽</li><li>将16384个插槽分配到不同的实例</li><li>读写数据:根据key的有效部分计算哈希值，对16384取余(有效部分，如果key前面有大括号，大括号的内容就是有效部分，如果没有，则以key本身做为有效部分)余数做为插槽，寻找插槽所在的实例</li><h2 id="Redis是单线程的，但是为什么还那么快"><a href="#Redis是单线程的，但是为什么还那么快" class="headerlink" title="Redis是单线程的，但是为什么还那么快"></a>Redis是单线程的，但是为什么还那么快</h2><p>Redis是纯内存操作，执行速度非常快<br>采用单线程，避免不必要的上下文切换可竞争条件，多线程还要考虑线程安全问题<br>使用I&#x2F;O多路复用模型，非阻塞IO</p><h2 id="能解释一下I-O多路复用模型"><a href="#能解释一下I-O多路复用模型" class="headerlink" title="能解释一下I&#x2F;O多路复用模型?"></a>能解释一下I&#x2F;O多路复用模型?</h2><p>Redis是纯内存操作，执行速度非常快，它的性能瓶颈是网络延迟而不是执行速度，I&#x2F;O多路复用模型主要就是实现了高效的网络请求<br>用户空间和内核空间<br>常见的IO模型<br>阻塞IO (Blocking lO)<br>非阻塞I0(Nonblocking l0)<br>IO多路复用 (IO Multiplexing)<br>Redis网络模型</p><h3 id="用户空间和内核空间"><a href="#用户空间和内核空间" class="headerlink" title="用户空间和内核空间"></a><span style="color:#ff0000">用户空间和内核空间</span></h3><p>Linux系统中一个进程使用的内存情况划分两部分:<strong>内核空间</strong>、<strong>用户空间</strong><br><strong>用户空间</strong> 只能执行受限的命令(Ring3)，而且不能直接调用系统资源必须通过内核提供的接口来访问<br><strong>内核空间</strong> 可以执行特权命令(Ring0)，调用一切系统资源</p><p>Linux系统为了提高IO效率，会在用户空间和内核空间都加入缓冲区:<br>写数据时，要把用户缓冲数据拷贝到内核缓冲区，然后写入设备<br>读数据时，要从设备读取数据到内核缓冲区，然后拷贝到用户缓冲区</p><h3 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a><strong><span style="color:#ff0000">阻塞IO</span></strong></h3><p>顾名思义，阻塞IO就是两个阶段都必须阻塞等待:<br><strong>阶段一：</strong><br>用户进程尝试读取数据(比如网卡数据)<br>此时数据尚未到达，内核需要等待数据<br>此时用户进程也处于阻塞状态<br><strong>阶段二:</strong><br>数据到达并拷贝到内核缓冲区，代表已就绪<br>将内核数据拷贝到用户缓冲区<br>拷贝过程中，用户进程依然阻塞等待<br>拷贝完成，用户进程解除阻塞，处理数据<br>可以看到，阻塞IO模型中，用户进程在两个阶段都是阻塞状态。<br><img src="/img/Redis/阻塞IO.jpg"></p><h3 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a><strong><span style="color:#ff0000">非阻塞IO</span></strong></h3><p>顾名思义，非阻塞IO的recvfrom操作会立即返回结果而不是阻塞用户进程：<br><strong>阶段一：</strong><br>用户进程尝试读取数据(比如网卡数据)<br>此时数据尚未到达，内核需要等待数据<br>返回异常给用户进程<br>用户进程拿到error后，再次尝试读取<br>循环往复，直到数据就绪<br><strong>阶段二:</strong><br>将内核数据拷贝到用户缓冲区<br>拷贝过程中，用户进程依然阻塞等待<br>拷贝完成，用户进程解除阻塞，处理数据<br><img src="/img/Redis/非阻塞IO.jpg"><br>可以看到，非阻塞IO模型中，用户进程在第一个阶段是非阻塞，第二个阶段是阻塞状态。虽然是非阻塞，但性能并没有得到提高。而且忙等机制会导致CPU空转，CPU使用率暴增！</p><h3 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a><strong><span style="color:#ff0000">IO多路复用</span></strong></h3><p><strong>IO多路复用</strong>：是利用单个线程来同时监听多个Socket，并在某个Socket可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。<br><strong>阶段一：</strong><br>用户进程调用select，指定要监听的Socket集合<br>内核监听对应的多个socket<br>任意一个或多个socket数据就绪则返回readable<br>此过程中用户进程阻塞<br><strong>阶段二：</strong><br>用户进程找到就绪的socket<br>依次调用recvfrom读取数据<br>内核将数据拷贝到用户空间<br>用户进程处理数据<br><img src="/img/Redis/IO多路复用.jpg"></p><p>不过监听Socket的方式、通知的方式又有多种实现，常见的有：<br>select<br>poll<br>epoll<br><strong>差异</strong><br>select和poll只会通知用户进程有Socket就绪，但不确定具体是哪个Socket，需要用户进程逐个遍历Socket来确认</p><p>epoll则会在通知用户进程Socket就绪的同时，把已就绪的Socket写入用户空间</p><h3 id="Redis网络模型"><a href="#Redis网络模型" class="headerlink" title="Redis网络模型"></a>Redis网络模型</h3><p>Redis通过IO多路复用来提高网络性能，并且支持各种不同的多路复用实现，并且将这些实现进行封装，提供了统一的高性能事件库<br><img src="/img/Redis/Redis网络模型.jpg"></p><p><strong>总结</strong><br>能解释一下I&#x2F;O多路复用模型?</p><ol><li><strong>I&#x2F;O多路复用</strong><br>是指利用单个线程来同时监听多个Socket，并在某个Socket可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。目前的I&#x2F;O多路复用都是采用的epoll模式实现，它会在通知用户进程Socket就绪的同时，把已就绪的Socket写入用户空间，不需要挨个遍历Socket来判断是否就绪，提升了性能。</li><li><strong>Redis网络模型</strong><br>就是使用I&#x2F;O多路复用结合事件的处理器来应对多个Socket请求<br>连接应答处理器<br>命令回复处理器，在Redis6.0之后，为了提升更好的性能，使用了多线程来处理回复事件<br>命令请求处理器，在Redis6.0之后，将命令的转换使用了多线程，增加命令转换速度，在命令执行的时候，依然是单线程</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴Java开发手册</title>
      <link href="/2023/11/12/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83-%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/2023/11/12/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83-%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p><strong><p style="color:#FF0000" align="right">注：此手册版权归阿里巴巴集团所有，博主只是为了在开发时方便查阅而已，禁止商用。<p></strong></p><h1 id="阿里巴巴Java开发手册终极版-1-3-0"><a href="#阿里巴巴Java开发手册终极版-1-3-0" class="headerlink" title="阿里巴巴Java开发手册终极版 1.3.0"></a><center>阿里巴巴Java开发手册终极版 1.3.0</center></h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><center>目录</center></h2><p>一、编程规约<br>  （一）命名风格<br>  （二）常量定义<br>  （三）代码格式<br>  （四）OOP规约<br>  （五）集合处理<br>  （六）并发处理<br>  （七）控制语句<br>  （八）注释规范<br>  （九）其它<br>二、异常日志<br>  （一）异常处理<br>  （二）日志规约<br>三、单元测试<br>四、安全规约<br>五、MySQL数据库<br>  （一）建表规约<br>  （二）索引规约<br>  （三）SQL语句<br>  （四）ORM映射<br>六、工程结构<br>  （一）应用分层<br>  （二）二方库依赖<br>  （三）服务器</p><p>附页：本手册专有名词</p><h2 id="一、编程规约"><a href="#一、编程规约" class="headerlink" title="一、编程规约"></a>一、编程规约</h2><h3 id="（一）命名规范"><a href="#（一）命名规范" class="headerlink" title="（一）命名规范"></a>（一）命名规范</h3><ol><li><p><strong>【强制】</strong> 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。<br><span style="color:#ff4500">反例： </span>_name &#x2F; _<em>name &#x2F; $Object &#x2F; name</em> &#x2F; name$ &#x2F; Object$</p></li><li><p><strong>【强制】</strong> 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br><span style="color:#977c00">说明： </span>正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。<br><span style="color:#019858">正例： </span>alibaba &#x2F; taobao &#x2F; youku &#x2F; hangzhou 等国际通用的名称，可视同英文。<br><span style="color:#ff4500">反例： </span>DaZhePromotion [打折] &#x2F; getPingfenByName() [评分] &#x2F; int 某变量 &#x3D; 3</p></li><li><p><strong>【强制】</strong> 类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外：DO &#x2F; BO &#x2F; DTO &#x2F; VO &#x2F; AO<br><span style="color:#019858">正例： </span>MarcoPolo &#x2F; UserDO &#x2F; XmlService &#x2F; TcpUdpDeal &#x2F; TaPromotion<br><span style="color:#ff4500">反例： </span>macroPolo &#x2F; UserDo &#x2F; XMLService &#x2F; TCPUDPDeal &#x2F; TAPromotion</p></li><li><p><strong>【强制】</strong> 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。<br><span style="color:#019858">正例： </span> localValue &#x2F; getHttpMessage() &#x2F; inputUserId</p></li><li><p><strong>【强制】</strong> 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br><span style="color:#019858">正例： </span>MAX_STOCK_COUNT<br><span style="color:#ff4500">反例： </span>MAX_COUNT</p></li><li><p><strong>【强制】</strong> 抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾。</p></li><li><p><strong>【强制】</strong> 中括号是数组类型的一部分，数组定义如下：String[] args;<br><span style="color:#ff4500">反例： </span>使用 String args[]的方式来定义。</p></li><li><p><strong>【强制】</strong> POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。<br><span style="color:#ff4500">反例： </span>定义为基本数据类型 Boolean isDeleted；的属性，它的方法也是 isDeleted()，RPC框架在反向解析的时候,“以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p></li><li><p><strong>【强制】</strong> 包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br><span style="color:#019858">正例： </span> 应用工具类包名为 com.alibaba.open.util、类名为 MessageUtils（此规则参考spring 的框架结构）</p></li><li><p><strong>【强制】</strong> 杜绝完全不规范的缩写，避免望文不知义。<br><span style="color:#ff4500">反例： </span>AbstractClass”缩写”命名成 AbsClass；condition“缩写”命名成 condi，此类随意缩写严重降低了代码的可阅读性。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意。<br><span style="color:#019858">正例： </span>从远程仓库拉取代码的类命名为 PullCodeFromRemoteRepository。<br><span style="color:#ff4500">反例： </span>变量 int a; 的随意命名方式。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。<br><span style="color:#977c00">说明： </span>将设计模式体现在名字中，有利于阅读者快速理解架构设计理念。<br><span style="color:#019858">正例： </span>public class OrderFactory;<br>  public class LoginProxy;<br>  public class ResourceObserver;</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。<br><span style="color:#019858">正例： </span>接口方法签名：void f();<br>  接口基础常量表示：String COMPANY &#x3D; “alibaba”;<br><span style="color:#ff4500">反例： </span>接口方法定义：public abstract void f();<br><span style="color:#977c00">说明： </span>JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</p></li><li><p>接口和实现类的命名有两套规则：<br>1）<strong>【强制】</strong> 对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。<br><span style="color:#019858">正例： </span>CacheServiceImpl 实现 CacheService 接口。<br>2）<strong>【</strong>推荐<strong>】</strong> 如果是形容能力的接口名称，取对应的形容词做接口名（通常是–able 的形式）。<br><span style="color:#019858">正例： </span>AbstractTranslator 实现 Translatable。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br><span style="color:#977c00">说明： </span>枚举其实就是特殊的常量类，且构造方法被默认强制是私有。<br><span style="color:#019858">正例： </span>枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS &#x2F; UNKOWN_REASON。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 各层命名规约：<br><strong>A)</strong> Service&#x2F;DAO 层方法命名规约<br>1） 获取单个对象的方法用 get 做前缀。<br>2） 获取多个对象的方法用 list 做前缀。<br>3） 获取统计值的方法用 count 做前缀。<br>4） 插入的方法用 save&#x2F;insert 做前缀。<br>5） 删除的方法用 remove&#x2F;delete 做前缀。<br>6） 修改的方法用 update 做前缀。<br><strong>B)</strong> 领域模型命名规约<br>1） 数据对象：xxxDO，xxx 即为数据表名。<br>2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。<br>3） 展示对象：xxxVO，xxx 一般为网页名称。<br>4） POJO 是 DO&#x2F;DTO&#x2F;BO&#x2F;VO 的统称，禁止命名成 xxxPOJO。</p></li></ol><h3 id="（二）常量定义"><a href="#（二）常量定义" class="headerlink" title="（二）常量定义"></a>（二）常量定义</h3><ol><li><p><strong>【强制】</strong> 不允许任何魔法值（即未经定义的常量）直接出现在代码中。<br><span style="color:#ff4500">反例： </span>String key &#x3D; “Id#taobao_” + tradeId;<br>   cache.put(key, value);</p></li><li><p><strong>【强制】</strong> long 或者 Long 初始赋值时，使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。<br><span style="color:#977c00">说明： </span>Long a &#x3D; 2l; 写的是数字的 21，还是 Long 型的 2?</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 不要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。<br><span style="color:#977c00">说明： </span>大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。<br><span style="color:#019858">正例： </span>缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 ConfigConsts 下。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。<br>1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。<br>2） 应用内共享常量：放置在一方库中，通常是 modules 中的 constant 目录下。<br><span style="color:#ff4500">反例： </span>易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示“是”的变量：<br>类 A 中：public static final String YES &#x3D; “yes”;<br>类 B 中：public static final String YES &#x3D; “y”;<br>A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。<br>3） 子工程内部共享常量：即在当前子工程的 constant 目录下。<br>4） 包内共享常量：即在当前包下单独的 constant 目录下。<br>5） 类内共享常量：直接在类内部 private static final 定义。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 如果变量值仅在一个范围内变化，且带有名称之外的延伸属性，定义为枚举类。下面正例中的数字就是延伸信息，表示星期几。<br><span style="color:#019858">正例： </span>public Enum { MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6),<br>SUNDAY(7);}</p></li></ol><h3 id="（三）代码格式"><a href="#（三）代码格式" class="headerlink" title="（三）代码格式"></a>（三）代码格式</h3><ol><li><p><strong>【强制】</strong> 大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：<br>1） 左大括号前不换行。<br>2） 左大括号后换行。<br>3） 右大括号前换行。<br>4） 右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。</p></li><li><p><strong>【强制】</strong> 左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格。详见第 5 条下方正例提示。<br><span style="color:#ff4500">反例： </span>if (空格 a &#x3D;&#x3D; b 空格)</p></li><li><p><strong>【强制】</strong> if&#x2F;for&#x2F;while&#x2F;switch&#x2F;do 等保留字与括号之间都必须加空格。</p></li><li><p><strong>【强制】</strong> 任何二目、三目运算符的左右两边都需要加一个空格。<br><span style="color:#977c00">说明： </span>运算符包括赋值运算符&#x3D;、逻辑运算符&amp;&amp;、加减乘除符号等。</p></li><li><p><strong>【强制】</strong> 采用 4 个空格缩进，禁止使用 tab 字符。<br><span style="color:#977c00">说明： </span>如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。IDEA 设置 tab 为 4 个空格时，请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。<br><span style="color:#019858">正例： </span> （涉及 1-5 点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">    <span class="comment">// 缩进 4 个空格 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">say</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>; </span><br><span class="line">    <span class="comment">// 运算符的左右必须有一个空格 </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格 </span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123; </span><br><span class="line">      System.out.println(say); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 左大括号前加空格且不换行；左大括号后换行 </span></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;world&quot;</span>); </span><br><span class="line">    <span class="comment">// 右大括号前换行，右大括号后有 else，不用换行 </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      System.out.println(<span class="string">&quot;ok&quot;</span>); </span><br><span class="line">    <span class="comment">// 在右大括号后直接结束，则必须换行 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong> 注释的双斜线与注释内容之间有且仅有一个空格。<br><span style="color:#019858">正例： </span>&#x2F;&#x2F; 注释内容，注意在&#x2F;&#x2F;和注释内容之间有一个空格。</p></li><li><p><strong>【强制】</strong> 单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：<br>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。<br>2） 运算符与下文一起换行。<br>3） 方法调用的点符号与下文一起换行。<br>4） 方法调用时，多个参数，需要换行时，在逗号后进行。<br>5） 在括号前不要换行，见反例。<br><span style="color:#019858">正例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(); </span><br><span class="line"><span class="comment">// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行</span></span><br><span class="line">sb.append(<span class="string">&quot;zi&quot;</span>).append(<span class="string">&quot;xin&quot;</span>)... </span><br><span class="line">.append(<span class="string">&quot;huang&quot;</span>)... </span><br><span class="line">.append(<span class="string">&quot;huang&quot;</span>)... </span><br><span class="line">.append(<span class="string">&quot;huang&quot;</span>);</span><br></pre></td></tr></table></figure><p><span style="color:#ff4500">反例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(); </span><br><span class="line"><span class="comment">// 超过 120 个字符的情况下，不要在括号前换行</span></span><br><span class="line">sb.append(<span class="string">&quot;zi&quot;</span>).append(<span class="string">&quot;xin&quot;</span>)...append </span><br><span class="line">(<span class="string">&quot;huang&quot;</span>); </span><br><span class="line"><span class="comment">// 参数很多的方法调用可能超过 120 个字符，不要在逗号前换行</span></span><br><span class="line">method(args1, args2, args3, ... , argsX); </span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong>方法参数在定义和传入时，多个参数逗号后边必须加空格。<br><span style="color:#019858">正例： </span>下例中实参的”a”,后边必须要有一个空格。<br>method(“a”, “b”, “c”); </p></li><li><p><strong>【强制】</strong>IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，不要使用 Windows 格式。</p></li><li><p><strong>【</strong>推荐<strong>】</strong>没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。<br><span style="color:#019858">正例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>; </span><br><span class="line"><span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">4L</span>; </span><br><span class="line"><span class="type">float</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5F</span>; </span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(); </span><br></pre></td></tr></table></figure><p><span style="color:#977c00">说明： </span>增加 sb 这个变量，如果需要对齐，则给 a、b、c 都要增加几个空格，在变量比较多的情况下，是一种累赘的事情。</p></li><li><p><strong>【</strong>推荐<strong>】</strong>方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。<br><span style="color:#977c00">说明： </span>没有必要插入多个空行进行隔开。</p></li></ol><h3 id="（四）OOP规约"><a href="#（四）OOP规约" class="headerlink" title="（四）OOP规约"></a>（四）OOP规约</h3><ol><li><p><strong>【强制】</strong> 避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。</p></li><li><p><strong>【强制】</strong> 所有的覆写方法，必须加@Override 注解。<br><span style="color:#977c00">说明： </span>getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</p></li><li><p><strong>【强制】</strong> 相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。<br><span style="color:#977c00">说明： </span>可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程）<br><span style="color:#019858">正例： </span>public User getUsers(String type, Integer… ids) {…}</p></li><li><p><strong>【强制】</strong> 外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</p></li><li><p><strong>【强制】</strong> 不能使用过时的类或方法。<br><span style="color:#977c00">说明： </span>java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</p></li><li><p><strong>【强制】</strong> Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。<br><span style="color:#019858">正例： </span>“test”.equals(object);<br><span style="color:#ff4500">反例： </span>object.equals(“test”);<br><span style="color:#977c00">说明： </span>推荐使用 java.util.Objects#equals（JDK7 引入的工具类）</p></li><li><p><strong>【强制】</strong> 所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。<br><span style="color:#977c00">说明： </span>对于 Integer var &#x3D; ? 在-128 至 127 范围内的赋值，Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用&#x3D;&#x3D;进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，<br>推荐使用 equals 方法进行判断。</p></li><li><p>关于基本数据类型与包装数据类型的使用标准如下：<br>1） <strong>【强制】</strong> 所有的 POJO 类属性必须使用包装数据类型。<br>2） <strong>【强制】</strong> RPC 方法的返回值和参数必须使用包装数据类型。<br>3） <strong>【</strong>推荐<strong>】</strong> 所有的局部变量使用基本数据类型。<br><span style="color:#977c00">说明： </span>POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。<br><span style="color:#019858">正例： </span>数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。<br><span style="color:#ff4500">反例： </span>比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</p></li><li><p><strong>【强制】</strong> 定义 DO&#x2F;DTO&#x2F;VO 等 POJO 类时，不要设定任何属性默认值。<br><span style="color:#ff4500">反例： </span>POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p></li><li><p><strong>【强制】</strong> 序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。<br><span style="color:#977c00">说明： </span>注意 serialVersionUID 不一致会抛出序列化运行时异常。</p></li><li><p><strong>【强制】</strong> 构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</p></li><li><p><strong>【强制】</strong> POJO 类必须写 toString 方法。使用 IDE 的中工具：source&gt; generate toString时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。<br><span style="color:#977c00">说明： </span>在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排查问题。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。<br><span style="color:#977c00">说明： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;a,b,c,,&quot;</span>; </span><br><span class="line">String[] ary = str.split(<span class="string">&quot;,&quot;</span>); </span><br><span class="line"><span class="comment">// 预期大于 3，结果是 3</span></span><br><span class="line">System.out.println(ary.length); </span><br></pre></td></tr></table></figure></li><li><p><strong>【</strong>推荐<strong>】</strong> 当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第 15 条规则。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter&#x2F;setter方法。<br><span style="color:#977c00">说明： </span>公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有 Service和 DAO 的 getter&#x2F;setter 方法放在类体最后。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> setter 方法中，参数名称与类成员变量名称一致，this.成员名 &#x3D; 参数名。在getter&#x2F;setter 方法中，不要增加业务逻辑，增加排查问题的难度。<br><span style="color:#ff4500">反例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getData</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data + <span class="number">100</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data - <span class="number">100</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p><strong>【</strong>推荐<strong>】</strong> 循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。<br><span style="color:#977c00">说明： </span>反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。<br><span style="color:#ff4500">反例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;start&quot;</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123; </span><br><span class="line">    str = str + <span class="string">&quot;hello&quot;</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p><strong>【</strong>推荐<strong>】</strong> final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：<br>1） 不允许被继承的类，如：String 类。<br>2） 不允许修改引用的域对象，如：POJO 类的域变量。<br>3） 不允许被重写的方法，如：POJO 类的 setter 方法。<br>4） 不允许运行过程中重新赋值的局部变量。<br>5） 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好地进行重构。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 慎用 Object 的 clone 方法来拷贝对象。<br><span style="color:#977c00">说明： </span>对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象的拷贝。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 类成员与方法访问控制从严：<br>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。<br>2） 工具类不允许有 public 或 default 构造方法。<br>3） 类非 static 成员变量并且与子类共享，必须是 protected。<br>4） 类非 static 成员变量并且仅在本类使用，必须是 private。<br>5） 类 static 成员变量如果仅在本类使用，必须是 private。<br>6） 若是 static 成员变量，必须考虑是否为 final。<br>7） 类成员方法只供类内部调用，必须是 private。<br>8） 类成员方法只对继承类公开，那么限制为 protected。<br><span style="color:#977c00">说明： </span>任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。<br>思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 方法，或者一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</p></li></ol><h3 id="（五）集合处理"><a href="#（五）集合处理" class="headerlink" title="（五）集合处理"></a>（五）集合处理</h3><ol><li><p><strong>【强制】</strong> 关于 hashCode 和 equals 的处理，遵循如下规则：<br>1） 只要重写 equals，就必须重写 hashCode。<br>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法。<br>3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals。<br><span style="color:#977c00">说明： </span>String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象作为 key 来使用。</p></li><li><p><strong>【强制】</strong> ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常，即 java.util.RandomAccessSubList cannot be cast to java.util.ArrayList.<br><span style="color:#977c00">说明： </span>subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList ，而是ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。</p></li><li><p><strong>【强制】</strong> 在 subList 场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均会产生 ConcurrentModificationException 异常。</p></li><li><p><strong>【强制】</strong> 使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一样的数组，大小就是 list.size()。<br><span style="color:#977c00">说明： </span>使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为[ list.size() ]的数组元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素个数一致。<br><span style="color:#019858">正例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(<span class="number">2</span>); </span><br><span class="line">list.add(<span class="string">&quot;guan&quot;</span>); </span><br><span class="line">list.add(<span class="string">&quot;bao&quot;</span>); </span><br><span class="line">String[] array = <span class="keyword">new</span> <span class="title class_">String</span>[list.size()]; </span><br><span class="line">array = list.toArray(array); </span><br></pre></td></tr></table></figure><p><span style="color:#ff4500">反例： </span>直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</p></li><li><p><strong>【强制】</strong> 使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的 add&#x2F;remove&#x2F;clear 方法会抛出 UnsupportedOperationException 异常。<br><span style="color:#977c00">说明： </span>asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] str = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;you&quot;</span>, <span class="string">&quot;wu&quot;</span> &#125;;</span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(str);</span><br></pre></td></tr></table></figure><p>第一种情况：list.add(“yangguanbao”); 运行时异常。<br>第二种情况：str[0] &#x3D; “gujin”; 那么 list.get(0)也会随之修改。</p></li><li><p><strong>【强制】</strong> 泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法，而&lt;? super T&gt;不能使用 get 方法，做为接口调用赋值时易出错。<br><span style="color:#977c00">说明： </span>扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用&lt;? extends T&gt;。第二、经常往里插入的，适合用&lt;? super T&gt;。</p></li><li><p><strong>【强制】</strong> 不要在 foreach 循环里进行元素的 remove&#x2F;add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁。<br><span style="color:#019858">正例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = list.iterator(); </span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123; </span><br><span class="line">    <span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> iterator.next(); </span><br><span class="line">    <span class="keyword">if</span> (删除元素的条件) &#123; </span><br><span class="line">    iterator.remove(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:#ff4500">反例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); </span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>); </span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>); </span><br><span class="line"><span class="keyword">for</span> (String item : list) &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(item)) &#123; </span><br><span class="line">    list.remove(item); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><span style="color:#977c00">说明： </span>以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的结果吗？</p></li><li><p><strong>【强制】</strong> 在 JDK7 版本及以上，Comparator 要满足如下三个条件，不然 Arrays.sort，Collections.sort 会报 IllegalArgumentException 异常。<br><span style="color:#977c00">说明： </span>三个条件如下<br>1） x，y 的比较结果和 y，x 的比较结果相反。<br>2） x&gt;y，y&gt;z，则 x&gt;z。<br>3） x&#x3D;y，则 x，z 比较结果和 y，z 比较结果相同。<br><span style="color:#ff4500">反例： </span>下例中没有处理相等的情况，实际使用中可能会出现异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> o1.getId() &gt; o2.getId() ? <span class="number">1</span> : -<span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>【</strong>推荐<strong>】</strong> 集合初始化时，指定集合初始值大小。<br><span style="color:#977c00">说明： </span>HashMap 使用 HashMap(int initialCapacity) 初始化，<br><span style="color:#019858">正例： </span>initialCapacity &#x3D; (需要存储的元素个数 &#x2F; 负载因子) + 1。注意负载因子（即 loader factor）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。<br><span style="color:#ff4500">反例： </span>HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大，resize 需要重建 hash 表，严重影响性能。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。<br><span style="color:#977c00">说明： </span>keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。<br><span style="color:#019858">正例： </span>values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 高度注意 Map 类集合 K&#x2F;V 能不能存储 null 值的情况，如下表格：</p><table><thead><tr><th>集合类</th><th>Key</th><th>Value</th><th>Super</th><th>说明</th></tr></thead><tbody><tr><td>Hashtable</td><td><p style="color:#FF0000">不允许为null</p></td><td><p style="color:#FF0000">不允许为 null</p></td><td>Dictionary</td><td>线程安全</td></tr><tr><td>ConcurrentHashMap</td><td><p style="color:#FF0000">不允许为 null</p></td><td><p style="color:#FF0000">不允许为 null</p></td><td>AbstractMap</td><td>锁分段技术（JDK8:CAS）</td></tr><tr><td>TreeMap</td><td><p style="color:#FF0000">不允许为 null</p></td><td><p style="color:#0000ff">允许为 null</p></td><td>AbstractMap</td><td>线程不安全</td></tr><tr><td>HashMap</td><td><p style="color:#0000ff">允许为 null</p></td><td><p style="color:#0000ff">允许为 null</p></td><td>AbstractMap</td><td>线程不安全</td></tr></tbody></table><p><span style="color:#ff4500">反例： </span> 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛出 NPE 异常。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。<br><span style="color:#977c00">说明： </span>有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次序是一定的。如ArrayList 是 order&#x2F;unsort；HashMap 是 unorder&#x2F;unsort；TreeSet 是order&#x2F;sort。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains 方法进行遍历、对比、去重操作。</p></li></ol><h3 id="（六）并发处理"><a href="#（六）并发处理" class="headerlink" title="（六）并发处理"></a>（六）并发处理</h3><ol><li><p><strong>【强制】</strong> 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。<br><span style="color:#977c00">说明： </span>资源驱动类、工具类、单例工厂类都需要注意。</p></li><li><p><strong>【强制】</strong> 创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。<br><span style="color:#019858">正例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerTaskThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimerTaskThread</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="built_in">super</span>.setName(<span class="string">&quot;TimerTaskThread&quot;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong> 线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。<br><span style="color:#977c00">说明： </span>使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p></li><li><p><strong>【强制】</strong> 线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br><span style="color:#977c00">说明： </span>Executors 返回的线程池对象的弊端如下：<br>1）FixedThreadPool 和 SingleThreadPool:<br>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。<br>2）CachedThreadPool 和 ScheduledThreadPool:<br>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p></li><li><p><strong>【强制】</strong> SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类。<br><span style="color:#019858">正例： </span>注意线程安全，使用 DateUtils。亦推荐如下处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;DateFormat&gt;() &#123; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">protected</span> DateFormat <span class="title function_">initialValue</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p><span style="color:#977c00">说明： </span>如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替 SimpleDateFormat，官方给出的解释：simple beautiful strongimmutable thread-safe。</p></li><li><p><strong>【强制】</strong> 高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。<br><span style="color:#977c00">说明： </span>尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p></li><li><p><strong>【强制】</strong> 对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。<br><span style="color:#977c00">说明： </span>线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可能出现死锁。</p></li><li><p><strong>【强制】</strong> 并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。<br><span style="color:#977c00">说明： </span>如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</p></li><li><p><strong>【强制】</strong> 多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。<br><span style="color:#977c00">说明： </span>注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。<br><span style="color:#977c00">说明： </span>Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。<br><span style="color:#019858">正例： </span>在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保证每个线程持有一个实例。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 在并发场景下，通过双重检查锁（double-checked locking）实现延迟初始化的优化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)，推荐解决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型。<br><span style="color:#ff4500">反例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="type">Helper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line">        <span class="keyword">public</span> Helper <span class="title function_">getHelper</span><span class="params">()</span> &#123; </span><br><span class="line">            <span class="keyword">if</span> (helper == <span class="literal">null</span>) <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123; </span><br><span class="line">            <span class="keyword">if</span> (helper == <span class="literal">null</span>) </span><br><span class="line">            helper = <span class="keyword">new</span> <span class="title class_">Helper</span>(); </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">return</span> helper; </span><br><span class="line">        &#125; </span><br><span class="line">    <span class="comment">// other methods and fields... </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p><strong>【</strong>参考<strong>】</strong> volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现：AtomicInteger count &#x3D;new AtomicInteger(); count.addAndGet(1); 如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。</p></li><li><p><strong>【</strong>参考<strong>】</strong>  HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。</p></li><li><p><strong>【</strong>参考<strong>】</strong> ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。</p></li></ol><h3 id="（七）控制语句"><a href="#（七）控制语句" class="headerlink" title="（七）控制语句"></a>（七）控制语句</h3><ol><li><p><strong>【强制】</strong> 在一个 switch 块内，每个 case 要么通过 break&#x2F;return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。</p></li><li><p><strong>【强制】</strong> 在 if&#x2F;else&#x2F;for&#x2F;while&#x2F;do 语句中必须使用大括号。即使只有一行代码，避免采用单行的编码方式：  if (condition) statements;</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 表达异常的分支时，少用 if-else 方式，这种方式可以改写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (condition) &#123; </span><br><span class="line">  ... </span><br><span class="line">  <span class="keyword">return</span> obj; </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// 接着写 else 的业务逻辑代码;</span></span><br><span class="line">```       </span><br><span class="line">&lt;span style=<span class="string">&quot;color:#977c00&quot;</span>&gt;说明： &lt;/span&gt;</span><br><span class="line">如果非得使用 <span class="keyword">if</span>()...<span class="keyword">else</span> <span class="title function_">if</span><span class="params">()</span>...<span class="keyword">else</span>...方式表达逻辑，**【强制】** 避免后续代码维护困难，请勿超过 <span class="number">3</span> 层。</span><br><span class="line">&lt;span style=<span class="string">&quot;color:#019858&quot;</span>&gt;正例： &lt;/span&gt;超过 <span class="number">3</span> 层的 <span class="keyword">if</span>-<span class="keyword">else</span> 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：</span><br><span class="line"></span><br><span class="line">```Java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">today</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isBusy()) &#123;</span><br><span class="line">        System.out.println(“change time.”);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isFree()) &#123;</span><br><span class="line">        System.out.println(“go to travel.”);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>【</strong>推荐<strong>】</strong> 除常用方法（如 getXxx&#x2F;isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。<br><span style="color:#977c00">说明： </span><br>很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？<br><span style="color:#019858">正例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码如下</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">existed</span> <span class="operator">=</span> (file.open(fileName, <span class="string">&quot;w&quot;</span>) != <span class="literal">null</span>) &amp;&amp; (...) || (...);</span><br><span class="line">    <span class="keyword">if</span> (existed) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p><span style="color:#ff4500">反例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((file.open(fileName, <span class="string">&quot;w&quot;</span>) != <span class="literal">null</span>) &amp;&amp; (...) || (...)) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>【</strong>推荐<strong>】</strong> 循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体外）。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 接口入参保护，这种场景常见的是用于做批量操作的接口。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 下列情形，需要进行参数校验：<br>1） 调用频次低的方法。<br>2） 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。<br>3） 需要极高稳定性和可用性的方法。<br>4） 对外提供的开放接口，不管是 RPC&#x2F;API&#x2F;HTTP 接口。<br>5） 敏感权限入口。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 下列情形，不需要进行参数校验：<br>1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。<br>2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。<br>3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</p></li></ol><h3 id="（八）注释规约"><a href="#（八）注释规约" class="headerlink" title="（八）注释规约"></a>（八）注释规约</h3><ol><li><p><strong>【强制】</strong> 类、类属性、类方法的注释必须使用 Javadoc 规范，使用&#x2F;*<em>内容</em>&#x2F;格式，不得使用&#x2F;&#x2F; xxx 方式。<br><span style="color:#977c00">说明： </span>在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p></li><li><p><strong>【强制】</strong> 所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。<br><span style="color:#977c00">说明： </span>对子类的实现要求，或者调用注意事项，请一并说明。</p></li><li><p><strong>【强制】</strong> 所有的类都必须添加创建者和创建日期。</p></li><li><p><strong>【强制】</strong> 方法内部单行注释，在被注释语句上方另起一行，使用&#x2F;&#x2F;注释。方法内部多行注释使用&#x2F;* *&#x2F;注释，注意与代码对齐。</p></li><li><p><strong>【强制】</strong> 所有的枚举类型字段必须要有注释，说明每个数据项的用途。</p></li><li><p><strong>【</strong>推荐<strong>】</strong>与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。<br><span style="color:#ff4500">反例： </span>“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。<br><span style="color:#977c00">说明： </span>代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。<br><span style="color:#977c00">说明： </span>代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。</p></li><li><p><strong>【</strong>参考】** 对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。<br><span style="color:#ff4500">反例： </span><br>&#x2F;&#x2F; put elephant into fridge<br>put(elephant, fridge);<br>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p></li><li><p><strong>【</strong>参考<strong>】</strong>特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。<br>1） 待办事宜（TODO）:（ 标记人，标记时间，[预计处理时间]）<br>表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。<br>2） 错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）<br>在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</p></li></ol><h3 id="（九）其它"><a href="#（九）其它" class="headerlink" title="（九）其它"></a>（九）其它</h3><ol><li><p><strong>【强制】</strong> 在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。<br><span style="color:#977c00">说明： </span>不要在方法体内定义：Pattern pattern &#x3D; Pattern.compile(规则);</p></li><li><p><strong>【强制】</strong> velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is前缀），会自动调用 isXxx()方法。<br><span style="color:#977c00">说明： </span>注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</p></li><li><p><strong>【强制】</strong> 后台输送给页面的变量必须加$!{var}——中间的感叹号。<br><span style="color:#977c00">说明： </span>如果 var&#x3D;null 或者不存在，那么${var}会直接显示在页面上。</p></li><li><p><strong>【强制】</strong> 注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x&lt;1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取整，直接使用 Random 对象的nextInt 或者 nextLong 方法。</p></li><li><p><strong>【强制】</strong> 获取当前毫秒数 System.currentTimeMillis(); 而不是 new Date().getTime();<br><span style="color:#977c00">说明： </span>如果想获取更加精确的纳秒级时间值，使用 System.nanoTime()的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 不要在视图模板中加入任何复杂的逻辑。<br><span style="color:#977c00">说明： </span>根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 及时清理不再使用的代码段或配置信息。<br><span style="color:#977c00">说明： </span>对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。<br><span style="color:#019858">正例： </span>对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠(&#x2F;&#x2F;&#x2F;)来说明注释掉代码的理由。</p></li></ol><h2 id="二、异常日志"><a href="#二、异常日志" class="headerlink" title="二、异常日志"></a>二、异常日志</h2><h3 id="（一）异常处理"><a href="#（一）异常处理" class="headerlink" title="（一）异常处理"></a>（一）异常处理</h3><ol><li><p><strong>【强制】</strong> Java 类库中定义的一类 RuntimeException 可以通过预先检查进行规避，而不应该通过 catch 来处理，比如：IndexOutOfBoundsException，NullPointerException 等等。<br><span style="color:#977c00">说明： </span>无法通过预检查的异常除外，如在解析一个外部传来的字符串形式数字时，通过 catch NumberFormatException 来实现。<br><span style="color:#019858">正例： </span>if (obj !&#x3D; null) {…}<br><span style="color:#ff4500">反例： </span>try { obj.method() } catch (NullPointerException e) {…}</p></li><li><p><strong>【强制】</strong> 异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低。</p></li><li><p><strong>【强制】</strong> 对大段代码进行 try-catch，这是不负责任的表现。catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。</p></li><li><p><strong>【强制】</strong> 捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</p></li><li><p><strong>【强制】</strong> 有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回滚事务。</p></li><li><p><strong>【强制】</strong> finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。<br><span style="color:#977c00">说明： </span>如果 JDK7 及以上，可以使用 try-with-resources 方式。</p></li><li><p><strong>【强制】</strong> 不能在 finally 块中使用 return，finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。</p></li><li><p><strong>【强制】</strong> 捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。<br><span style="color:#977c00">说明： </span>如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。<br><span style="color:#977c00">说明： </span>本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回null 的情况。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：<br>1）返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。<br> <span style="color:#ff4500">反例： </span>public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。<br>2） 数据库的查询结果可能为 null。<br>3） 集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。<br>4） 远程调用返回对象时，一律要求进行空指针判断，防止 NPE。<br>5） 对于 Session 中获取的数据，建议 NPE 检查，避免空指针。<br>6） 级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。<br><span style="color:#019858">正例： </span>使用 JDK8 的 Optional 类来防止 NPE 问题。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 定义时区分 unchecked &#x2F; checked 异常，避免直接抛出 new RuntimeException()，更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException &#x2F; ServiceException 等。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 在代码中使用“抛异常”还是“返回错误码”，对于公司外的 http&#x2F;api 开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、“错误码”、“错误简短信息”。<br><span style="color:#977c00">说明： </span>关于 RPC 方法返回方式使用 Result 方式的理由：<br>1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。<br>2）如果不加栈信息，只是 new 自定义异常，加入自己的理解的 error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</p></li><li><p><strong>【</strong>参考】** 避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则。<br><span style="color:#977c00">说明： </span>随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。<br><span style="color:#019858">正例： </span>一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取：private boolean checkParam(DTO dto) {…}</p></li></ol><h3 id="（二）日志规约"><a href="#（二）日志规约" class="headerlink" title="（二）日志规约"></a>（二）日志规约</h3><ol><li><p><strong>【强制】</strong> 应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger; </span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Abc.class); </span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong> 日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点。</p></li><li><p><strong>【强制】</strong> 应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：appName_logType_logName.log。logType:日志类型，推荐分类有stats&#x2F;desc&#x2F;monitor&#x2F;visit 等；logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找。<br><span style="color:#019858">正例： </span>mppserver 应用中单独监控时区转换异常，如：<br>mppserver_monitor_timeZoneConvert.log<br><span style="color:#977c00">说明： </span>推荐对日志进行分类，如将错误日志和业务日志分开存放，便于开发人员查看，也便于通过日志对系统进行及时监控。</p></li><li><p><strong>【强制】</strong> 对 trace&#x2F;debug&#x2F;info 级别的日志输出，必须使用条件输出形式或者使用占位符的方式。<br><span style="color:#977c00">说明： </span>logger.debug(“Processing trade with id: “ + id + “ and symbol: “ + symbol);<br>如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象，会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。<br><span style="color:#019858">正例： </span>（条件）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123; </span><br><span class="line">logger.debug(<span class="string">&quot;Processing trade with id: &quot;</span> + id + <span class="string">&quot; and symbol: &quot;</span> + symbol); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><span style="color:#019858">正例： </span>（占位符）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;Processing trade with id: &#123;&#125; and symbol : &#123;&#125; &quot;</span>, id, symbol); </span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong> 避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 additivity&#x3D;false。<br><span style="color:#019858">正例： </span><logger name="com.taobao.dubbo.config" additivity="false"> </p></li><li><p><strong>【强制】</strong> 异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字 throws 往上抛出。<br><span style="color:#019858">正例： </span>logger.error(各类参数或者对象 toString + “_” + e.getMessage(), e);</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。<br><span style="color:#977c00">说明： </span>大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请<br>思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</p></li><li><p><strong>【</strong>参考<strong>】</strong> 可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。注意日志输出的级别，error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必要，请不要在此场景打出 error 级别。</p></li></ol><h2 id="三、单元测试"><a href="#三、单元测试" class="headerlink" title="三、单元测试"></a>三、单元测试</h2><ol><li><p><strong>【强制】</strong> 好的单元测试必须遵守 AIR 原则。<br><span style="color:#977c00">说明： </span>单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</p><ul>  <li> A：Automatic（自动化）</li>  <li>I：Independent（独立性）</li>  <li>R：Repeatable（可重复）</li></ul></li><li><p><strong>【强制】</strong> 单元测试应该是全自动执行的，并且非交互式的。测试框架通常是定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</p></li><li><p><strong>【强制】</strong> 保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。<br><span style="color:#ff4500">反例： </span>method2 需要依赖 method1 的执行，将执行结果做为 method2 的输入。</p></li><li><p><strong>【强制】</strong> 单元测试是可以重复执行的，不能受到外界环境的影响。<br><span style="color:#977c00">说明： </span>单元测试通常会被放到持续集成中，每次有代码 check in 时单元测试都会被执行。如果单测对外部环境（网络、服务、中间件等）有依赖，容易导致持续集成机制的不可用。<br><span style="color:#019858">正例： </span>为了不受外界环境影响，要求设计代码时就把 SUT 的依赖改成注入，在测试时用 spring这样的 DI 框架注入一个本地（内存）实现或者 Mock 实现。</p></li><li><p><strong>【强制】</strong> 对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别。<br><span style="color:#977c00">说明： </span>只有测试粒度小才能在出错时尽快定位到出错位置。单测不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。</p></li><li><p><strong>【强制】</strong> 核心业务、核心应用、核心模块的增量代码确保单元测试通过。<br><span style="color:#977c00">说明： </span>新增代码及时补充单元测试，如果新增代码影响了原有单元测试，请及时修正。</p></li><li><p><strong>【强制】</strong> 单元测试代码必须写在如下工程目录：src&#x2F;test&#x2F;java，不允许写在业务代码目录下。<br><span style="color:#977c00">说明： </span>源码构建时会跳过此目录，而单元测试框架默认是扫描此目录。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都要达到 100%<br><span style="color:#977c00">说明： </span>在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该进行单元测试。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。</p><ul>   <li>B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</li>  <li>C：Correct，正确的输入，并得到预期的结果。</li>  <li>D：Design，与设计文档相结合，来编写单元测试。</li>  <li>E：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得到预期的结果。</li></ul></li><li><p><strong>【</strong>推荐<strong>】</strong> 对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。<br><span style="color:#ff4500">反例： </span>删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这一行新增数据并不符合业务插入规则，导致测试结果异常。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。<br><span style="color:#019858">正例： </span>在 RDC 内部单元测试中，使用 RDC_UNIT_TEST_的前缀标识数据。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例（UC）。</p></li><li><p><strong>【推荐</strong>】** 单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目提测前完成单元测试。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 为了更方便地进行单元测试，业务代码应避免以下情况：</p><ul>  <li> 构造方法中做的事情过多。</li>  <li> 存在过多的全局变量和静态方法。</li>  <li> 存在过多的外部依赖。</li>  <li> 存在过多的条件语句。</li></ul><span style="color:#977c00">说明： </span>多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</li><li><p><strong>【</strong>参考<strong>】</strong> 不要对单元测试存在如下误解：</p><ul>  <li> 那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。</li>  <li> 单元测试代码是多余的。汽车的整体功能与各单元部件的测试正常与否是强相关的。</li>  <li> 单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li>  <li> 单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。</li></ul></li></ol><h2 id="四、安全规约"><a href="#四、安全规约" class="headerlink" title="四、安全规约"></a>四、安全规约</h2><ol><li><p><strong>【强制】</strong> 隶属于用户个人的页面或者功能必须进行权限控制校验。<br><span style="color:#977c00">说明： </span>防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信内容、修改他人的订单。</p></li><li><p><strong>【强制】</strong> 用户敏感数据禁止直接展示，必须对展示数据进行脱敏。<br><span style="color:#977c00">说明： </span>查看个人手机号码会显示成:158****9119，隐藏中间 4 位，防止隐私泄露。</p></li><li><p><strong>【强制】</strong> 用户输入的 SQL 参数严格使用参数绑定或者 METADATA 字段值限定，防止 SQL 注入，禁止字符串拼接 SQL 访问数据库。</p></li><li><p><strong>【强制】</strong> 用户请求传入的任何参数必须做有效性验证。<br><span style="color:#977c00">说明： </span>忽略参数校验可能导致：</p><ul>  <li>page size 过大导致内存溢出</li>  <li>恶意 order by 导致数据库慢查询</li>  <li>任意重定向</li>  <li>SQL 注入</li>  <li>反序列化注入</li>  <li>正则输入源串拒绝服务 ReDoS</li></ul><span style="color:#977c00">说明： </span>Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题，但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</li><li><p><strong>【强制】</strong> 禁止向 HTML 页面输出未经安全过滤或未正确转义的用户数据。</p></li><li><p><strong>【强制】</strong> 表单、AJAX 提交必须执行 CSRF 安全过滤。<br><span style="color:#977c00">说明： </span>CSRF(Cross-site request forgery)跨站请求伪造是一类常见编程漏洞。对于存在CSRF 漏洞的应用&#x2F;网站，攻击者可以事先构造好 URL，只要受害者用户一访问，后台便在用户不知情情况下对数据库中用户参数进行相应修改。</p></li><li><p><strong>【强制】</strong> 在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放限制，如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。<br><span style="color:#977c00">说明： </span>如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其它用户，并造成短信平台资源浪费。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略。</p></li></ol><h2 id="五、MySQL数据库"><a href="#五、MySQL数据库" class="headerlink" title="五、MySQL数据库"></a>五、MySQL数据库</h2><h3 id="（一）建表规约"><a href="#（一）建表规约" class="headerlink" title="（一）建表规约"></a>（一）建表规约</h3><ol><li><p><strong>【强制】</strong> 表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（ 1 表示是，0 表示否）。<br><span style="color:#977c00">说明： </span>任何字段如果为非负数，必须是 unsigned。<br><span style="color:#019858">正例： </span>表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。</p></li><li><p><strong>【强制】</strong> 表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。<br><span style="color:#977c00">说明： </span>MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。<br><span style="color:#019858">正例： </span>aliyun_admin，rdc_config，level3_name<br><span style="color:#ff4500">反例： </span>AliyunAdmin，rdcConfig，level_3_name</p></li><li><p><strong>【强制】</strong> 表名不使用复数名词。<br><span style="color:#977c00">说明： </span>表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。</p></li><li><p><strong>【强制】</strong> 禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p></li><li><p><strong>【强制】</strong> 主键索引名为 pk_字段名；唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。<br><span style="color:#977c00">说明： </span>pk_ 即 primary key；uk_ 即 unique key；idx_ 即 index 的简称。</p></li><li><p><strong>【强制】</strong> 小数类型为 decimal，禁止使用 float 和 double。<br><span style="color:#977c00">说明： </span>float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p></li><li><p><strong>【强制】</strong> 如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</p></li><li><p><strong>【强制】</strong> varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p></li><li><p><strong>【强制】</strong> 表必备三字段：id, gmt_create, gmt_modified。<br><span style="color:#977c00">说明： </span>其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1。gmt_create, gmt_modified 的类型均为 date_time 类型，前者现在时表示主动创建，后者过去分词表示被动更新。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 表的命名最好是加上“业务名称_表的作用”。<br><span style="color:#019858">正例： </span>alipay_task &#x2F; force_project &#x2F; trade_config</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 库名与应用名称尽量一致。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循：<br>1）不是频繁修改的字段。<br>2）不是 varchar 超长字段，更不能是 text 字段。<br><span style="color:#019858">正例： </span>商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存储类目名称，避免关联查询。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。<br><span style="color:#977c00">说明： </span>如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。<br><span style="color:#019858">正例： </span> 如下表，其中无符号值可以避免误存负数，且扩大了表示范围。</p><table><thead><tr><th>对象</th><th>年龄区间</th><th>类型</th><th>字节</th><th>表示范围</th></tr></thead><tbody><tr><td>人</td><td>150岁之间</td><td>unsigned tinyint</td><td>1</td><td>无符号值：0 到 255</td></tr><tr><td>龟</td><td>数百岁</td><td>unsigned smallint</td><td>2</td><td>无符号值：0 到 65535</td></tr><tr><td>恐龙化石</td><td>数千万年</td><td>unsigned int</td><td>4</td><td>无符号值：0 到 42.9亿</td></tr><tr><td>太阳</td><td>约50亿年</td><td>unsigned bigint</td><td>8</td><td>无符号值：0 到 约10的19次方</td></tr></tbody></table></li></ol><h3 id="（二）索引规约"><a href="#（二）索引规约" class="headerlink" title="（二）索引规约"></a>（二）索引规约</h3><ol><li><p><strong>【强制】</strong> 业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。<br><span style="color:#977c00">说明： </span>不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p></li><li><p><strong>【强制】</strong> 超过三个表禁止 join。需要 join 的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引。<br><span style="color:#977c00">说明： </span>即使双表 join 也要注意表索引、SQL 性能。</p></li><li><p><strong>【强制】</strong> 在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。<br><span style="color:#977c00">说明： </span>索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct left(列名, 索引长度))&#x2F;count(*)的区分度来确定。</p></li><li><p><strong>【强制】</strong> 页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<br><span style="color:#977c00">说明： </span>索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。<br><span style="color:#019858">正例： </span>where a&#x3D;? and b&#x3D;? order by c; 索引：a_b_c<br><span style="color:#ff4500">反例： </span>索引中有范围查找，那么索引有序性无法利用，如：WHERE a&gt;10 ORDER BY b; 索引a_b 无法排序。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 利用覆盖索引来进行查询操作，避免回表。<br><span style="color:#977c00">说明： </span>如果一本书需要知道第 11 章是什么标题，会翻开第 11 章对应的那一页吗？目录浏览一下就好，这个目录就是起到覆盖索引的作用。<br><span style="color:#019858">正例： </span>能够建立索引的种类：主键索引、唯一索引、普通索引，而覆盖索引是一种查询的一种效果，用 explain 的结果，extra 列会出现：using index。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 利用延迟关联或者子查询优化超多分页场景。<br><span style="color:#977c00">说明： </span>MySQL 并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。<br><span style="color:#019858">正例： </span>先快速定位需要获取的 id 段，然后再关联：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span> <span class="keyword">FROM</span> 表 <span class="number">1</span> a, (<span class="keyword">select</span> id <span class="keyword">from</span> 表 <span class="number">1</span> <span class="keyword">where</span> 条件 LIMIT <span class="number">100000</span>,<span class="number">20</span> ) b <span class="keyword">where</span> a.id<span class="operator">=</span>b.id</span><br></pre></td></tr></table></figure></li><li><p><strong>【</strong>推荐<strong>】</strong> SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是 consts最好。<br><span style="color:#977c00">说明： </span><br>1）consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段即可读取到数据。<br>2）ref 指的是使用普通的索引（normal index）。<br>3）range 对索引进行范围检索。<br><span style="color:#ff4500">反例： </span>explain 表的结果，type&#x3D;index，索引物理文件全扫描，速度非常慢，这个 index 级别比较 range 还低，与全表扫描是小巫见大巫。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 建组合索引的时候，区分度最高的在最左边。<br><span style="color:#019858">正例： </span>如果 where a&#x3D;? and b&#x3D;? ，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即可。<br><span style="color:#977c00">说明： </span>存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如：where a&gt;? and b&#x3D;? 那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 防止因字段类型不同造成的隐式转换，导致索引失效。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 创建索引时避免有如下极端误解：<br>1）宁滥勿缺。认为一个查询就需要建一个索引。<br>2）宁缺勿滥。认为索引会消耗空间、严重拖慢更新和新增速度。<br>3）抵制惟一索引。认为业务的惟一性一律需要在应用层通过“先查后插”方式解决。</p></li></ol><h3 id="（三）SQL语句"><a href="#（三）SQL语句" class="headerlink" title="（三）SQL语句"></a>（三）SQL语句</h3><ol><li><p><strong>【强制】</strong> 不要使用 count(列名)或 count(常量)来替代 count(<em>)，count(</em>)是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。<br><span style="color:#977c00">说明： </span>count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p></li><li><p><strong>【强制】</strong> count(distinct col) 计算该列除 NULL 之外的不重复行数，注意 count(distinctcol1, col2) 如果其中一列全为 NULL，那么即使另一列有不同的值，也返回为 0。</p></li><li><p><strong>【强制】</strong> 当某一列的值全是 NULL 时，count(col)的返回结果为 0，但 sum(col)的返回结果为NULL，因此使用 sum()时需注意 NPE 问题。<br><span style="color:#019858">正例： </span>可以使用如下方式来避免 sum 的 NPE 问题：SELECT IF(ISNULL(SUM(g)),0,SUM(g))FROM table;</p></li><li><p><strong>【强制】</strong> 使用 ISNULL()来判断是否为 NULL 值。<br><span style="color:#977c00">说明： </span>NULL 与任何值的直接比较都为 NULL。<br>1） NULL&lt;&gt;NULL 的返回结果是 NULL，而不是 false。<br>2） NULL&#x3D;NULL 的返回结果是 NULL，而不是 true。<br>3） NULL&lt;&gt;1 的返回结果是 NULL，而不是 true。</p></li><li><p><strong>【强制】</strong> 在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。</p></li><li><p><strong>【强制】</strong> 不得使用外键与级联，一切外键概念必须在应用层解决。<br><span style="color:#977c00">说明： </span>以学生和成绩的关系为例，学生表中的 student_id是主键，那么成绩表中的 student_id则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p></li><li><p><strong>【强制】</strong> 禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p></li><li><p><strong>【强制】</strong> 数据订正时，删除和修改记录时，要先 select，避免出现误删除，确认无误才能执<br>行更新语句。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控<br>制在 1000 个之内。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 如果有全球化需要，所有的字符存储与表示，均以 utf-8 编码，注意字符统计函数的区别。<br><span style="color:#977c00">说明： </span><br> SELECT LENGTH(“轻松工作”)； 返回为 12<br> SELECT CHARACTER_LENGTH(“轻松工作”)； 返回为 4<br> 如果需要存储表情，那么选择 utfmb4 来进行存储，注意它与 utf-8 编码的区别。</p></li><li><p><strong>【</strong>参考<strong>】</strong> TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE无事务且不触发 trigger，有可能造成事故，故不建议在开发代码中使用此语句。<br><span style="color:#977c00">说明： </span>TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p></li></ol><h3 id="（四）ORM映射"><a href="#（四）ORM映射" class="headerlink" title="（四）ORM映射"></a>（四）ORM映射</h3><ol><li><p><strong>【强制】</strong> 在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明。<br><span style="color:#977c00">说明： </span>1）增加查询分析器解析成本。2）增减字段容易与 resultMap 配置不一致。</p></li><li><p><strong>【强制】</strong> POJO 类的布尔属性不能加 is，而数据库字段必须加 is_，要求在 resultMap 中进行<br>字段与属性之间的映射。<br><span style="color:#977c00">说明： </span>参见定义 POJO 类以及数据库字段定义规定，在<resultMap>中增加映射，是必须的。在 MyBatis Generator 生成的代码中，需要进行对应的修改。</p></li><li><p><strong>【强制】</strong> 不要用 resultClass 当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个与之对应。<br><span style="color:#977c00">说明： </span>配置映射关系，使字段与 DO 类解耦，方便维护。</p></li><li><p><strong>【强制】</strong> sql.xml 配置参数使用：#{}，#param# 不要使用${} 此种方式容易出现 SQL 注入。</p></li><li><p><strong>【强制】</strong> iBATIS 自带的 queryForList(String statementName,int start,int size)不推荐使用。<br><span style="color:#977c00">说明： </span>其实现方式是在数据库取到statementName对应的SQL语句的所有记录，再通过subList取 start,size 的子集合。<br><span style="color:#019858">正例： </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;(); </span><br><span class="line">map.put(<span class="string">&quot;start&quot;</span>, start); </span><br><span class="line">map.put(<span class="string">&quot;size&quot;</span>, size); </span><br></pre></td></tr></table></figure></li><li><p><strong>【强制】</strong> 不允许直接拿 HashMap 与 Hashtable 作为查询结果集的输出。<br><span style="color:#977c00">说明： </span>resultClass&#x3D;”Hashtable”，会置入字段名和属性值，但是值的类型不可控。</p></li><li><p><strong>【强制】</strong> 更新数据表记录时，必须同时更新记录对应的 gmt_modified 字段值为当前时间。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字段，都进行 update table set c1&#x3D;value1,c2&#x3D;value2,c3&#x3D;value3; 这是不对的。执行 SQL时，不要更新无改动的字段，一是易出错；二是效率低；三是增加 binlog 存储。</p></li><li><p><strong>【</strong>参考<strong>】</strong> @Transactional 事务不要滥用。事务会影响数据库的 QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p></li><li><p><strong>【</strong>参考<strong>】</strong> <isEqual>中的 compareValue 是与属性值对比的常量，一般是数字，表示相等时带上此条件；<isNotEmpty>表示不为空且不为 null 时执行；<isNotNull>表示不为 null 值时执行。</p></li></ol><h2 id="六、工程结构"><a href="#六、工程结构" class="headerlink" title="六、工程结构"></a>六、工程结构</h2><h3 id="（一）应用分层"><a href="#（一）应用分层" class="headerlink" title="（一）应用分层"></a>（一）应用分层</h3><ol><li><p><strong>【</strong>推荐<strong>】</strong> 图中默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web 层，也可以直接依赖于 Service 层，依此类推：</p><img src="/img/alibaba-应用分层.jpeg"><ul><li> <b>开放接口层：</b> 可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；进行网关安全控制、流量控制等。</li><li> <b>终端显示层：</b> 各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</li><li> <b>Web 层：</b>主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li><li> <b>Service 层：</b> 相对具体的业务逻辑服务层。</li><li> <b>Manager 层：</b> 通用业务处理层，它有如下特征：</li>1） 对第三方平台封装的层，预处理返回结果及转化异常信息；2） 对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；3） 与 DAO 层交互，对多个 DAO 的组合复用。</li><li> <b> DAO 层：</b> 数据访问层，与底层 MySQL、Oracle、Hbase 等进行数据交互。</li><li> <b>外部接口或第三方平台：</b> 包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li></ul></li><li><p><strong>【</strong>参考<strong>】</strong> （分层异常处理规约）在 DAO 层，产生的异常类型有很多，无法用细粒度的异常进行 catch，使用 catch(Exception e)方式，并 throw new DAOException(e)，不需要打印日志，因为日志在 Manager&#x2F;Service 层一定需要捕获并打到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在 Service 层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。如果 Manager 层与 Service 同机部署，日志方式与 DAO层处理一致，如果是单独部署，则采用与 Service 一致的处理方式。Web 层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，加上用户容易理解的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。</p></li><li><p><strong>【</strong>参考<strong>】</strong>分层领域模型规约：</p><ul><li> <b>DO（Data Object）：</b> 与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li><li> <b>DTO（Data Transfer Object）：</b> 数据传输对象，Service 或 Manager 向外传输的对象。</li><li> <b>BO（Business Object）：</b> 业务对象。由 Service 层输出的封装业务逻辑的对象。</li><li> <b>AO（Application Object）：</b> 应用对象。在 Web 层与 Service 层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li><li> <b>VO（View Object）：</b> 显示层对象，通常是 Web 向模板渲染引擎层传输的对象。 </li><li> <b>Query：数据查询对象，</b> 各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</li></ul></li></ol><h3 id="（二）二方库依赖"><a href="#（二）二方库依赖" class="headerlink" title="（二）二方库依赖"></a>（二）二方库依赖</h3><ol><li><p><strong>【强制】</strong> 定义 GAV 遵从以下规则：<br>1） GroupID 格式：com.{公司&#x2F;BU }.业务线.[子业务线]，最多 4 级。<br><span style="color:#977c00">说明： </span>{公司&#x2F;BU} 例如：alibaba&#x2F;taobao&#x2F;tmall&#x2F;aliexpress 等 BU 一级；子业务线可选。<br><span style="color:#019858">正例： </span>com.taobao.jstorm 或 com.alibaba.dubbo.register<br>2） ArtifactID 格式： 产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。<br><span style="color:#019858">正例： </span>dubbo-client &#x2F; fastjson-api &#x2F; jstorm-tool<br>3） Version：详细规定参考下方。</p></li><li><p><strong>【强制】</strong> 二方库版本号命名方式：主版本号.次版本号.修订号<br>1） <strong>主版本号：</strong> 产品方向改变，或者大规模 API 不兼容，或者架构不兼容升级。<br>2） <strong>次版本号：</strong> 保持相对兼容性，增加主要功能特性，影响范围极小的 API 不兼容修改。<br>3） <strong>修订号：</strong> 保持完全兼容性，修复 BUG、新增次要功能特性等。<br><span style="color:#977c00">说明： </span>注意起始版本号必须为：1.0.0，而不是 0.0.1 正式发布的类库必须先去中央仓库进行查证，使版本号有延续性，正式版本号不允许覆盖升级。如当前版本：1.3.3，那么下一个合理的版本号：1.3.4 或 1.4.0 或 2.0.0</p></li><li><p><strong>【强制】</strong> 线上应用不要依赖 SNAPSHOT 版本（安全包除外）。<br><span style="color:#977c00">说明： </span>不依赖 SNAPSHOT 版本是保证应用发布的幂等性。另外，也可以加快编译时的打包构建。</p></li><li><p><strong>【强制】</strong> 二方库的新增或升级，保持除功能点之外的其它 jar 包仲裁结果不变。如果有改变，必须明确评估和验证，建议进行 dependency:resolve 前后信息比对，如果仲裁结果完全不一致，那么通过 dependency:tree 命令，找出差异点，进行<excludes>排除 jar 包。</p></li><li><p><strong>【强制】</strong> 二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的 POJO 对象。</p></li><li><p><strong>【强制】</strong> 依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致。<br><span style="color:#977c00">说明： </span>依赖 springframework-core,-context,-beans，它们都是同一个版本，可以定义一个变量来保存版本：${spring.version}，定义依赖的时候，引用该版本。</p></li><li><p><strong>【强制】</strong> 禁止在子项目的 pom 依赖中出现相同的 GroupId，相同的 ArtifactId，但是不同的Version。<br><span style="color:#977c00">说明： </span>在本地调试时会使用各子项目指定的版本号，但是合并成一个 war，只能有一个版本号出现在最后的 lib 目录中。可能出现线下调试是正确的，发布到线上却出故障的问题。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 所有 pom 文件中的依赖声明放在<dependencies>语句块中，所有版本仲裁放在<br><dependencyManagement>语句块中。<br><span style="color:#977c00">说明： </span><dependencyManagement>里只是声明版本，并不实现引入，因此子项目需要显式的声明依赖，version 和 scope 都读取自父 pom。而<dependencies>所有声明在主 pom 的<dependencies>里的依赖都会自动引入，并默认被所有的子项目继承。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 二方库不要有配置项，最低限度不要再增加配置项。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：<br>1）精简可控原则。移除一切不必要的 API 和依赖，只包含 Service API、必要的领域模型对象、Utils 类、常量、枚举等。如果依赖其它二方库，尽量是 provided 引入，让二方库使用者去依赖具体版本号；无 log 具体实现，只依赖日志框架。<br>2）稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。</p></li></ol><h3 id="（三）服务器"><a href="#（三）服务器" class="headerlink" title="（三）服务器"></a>（三）服务器</h3><ol><li><p><strong>【</strong>推荐<strong>】</strong> 高并发服务器建议调小 TCP 协议的 time_wait 超时时间。<br><span style="color:#977c00">说明： </span>操作系统默认 240 秒后，才会关闭处于 time_wait 状态的连接，在高并发访问下，服务器端会因为处于 time_wait 的连接数太多，可能无法建立新的连接，所以需要在服务器上调小此等待值。<br><span style="color:#019858">正例： </span>在 linux 服务器上请通过变更&#x2F;etc&#x2F;sysctl.conf 文件去修改该缺省值（秒）：<br>net.ipv4.tcp_fin_timeout &#x3D; 30</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 调大服务器所支持的最大文件句柄数（File Descriptor，简写为 fd）。<br><span style="color:#977c00">说明： </span>主流操作系统的设计是将 TCP&#x2F;UDP 连接采用与文件一样的方式去管理，即一个连接对应于一个 fd。主流的 linux 服务器默认所支持最大 fd 数量为 1024，当并发连接数很大时很容易因为 fd 不足而出现“open too many files”错误，导致新的连接无法建立。 建议将 linux服务器所支持的最大句柄数调高数倍（与服务器的内存数量相关）。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 给 JVM 设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM 场景时输出dump 信息。<br><span style="color:#977c00">说明： </span>OOM 的发生是有概率的，甚至有规律地相隔数月才出现一例，出现时的现场信息对查错非常有价值。</p></li><li><p><strong>【</strong>推荐<strong>】</strong> 在线上生产环境，JVM 的 Xms 和 Xmx 设置一样大小的内存容量，避免在 GC 后调整堆<br>大小带来的压力。</p></li><li><p><strong>【</strong>参考<strong>】</strong> 服务器内部重定向使用 forward；外部重定向地址使用 URL 拼装工具类来生成，否则会带来 URL 维护不一致的问题和潜在的安全风险。</p></li></ol><h2 id="附页：本手册专有名词"><a href="#附页：本手册专有名词" class="headerlink" title="附页：本手册专有名词"></a>附页：本手册专有名词</h2><ol><li><strong>POJO</strong> （Plain Ordinary Java Object）: 在本手册中，POJO 专指只有 setter &#x2F; getter&#x2F; toString 的简单类，包括 DO&#x2F;DTO&#x2F;BO&#x2F;VO 等。</li><li><strong>GAV</strong> （GroupId、ArtifactctId、Version）: Maven 坐标，是用来唯一标识 jar 包。</li><li><strong>OOP</strong>（Object Oriented Programming）: 本手册泛指类、对象的编程处理方式。</li><li><strong>ORM</strong>（Object Relation Mapping）: 对象关系映射，对象领域模型与底层数据之间的转换，本文泛指iBATIS, mybatis 等框架。</li><li><strong>NPE</strong>（java.lang.NullPointerException）: 空指针异常。</li><li><strong>SOA</strong>（Service-Oriented Architecture）: 面向服务架构，它可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用，有利于提升组件可重用性，可维护性。</li><li><strong>一方库:</strong> 本工程内部子项目模块依赖的库（jar 包）。</li><li><strong>二方库:</strong> 公司内部发布到中央仓库，可供公司内部其它应用依赖的库（jar 包）。</li><li><strong>三方库:</strong> 公司之外的开源库（jar 包）。</li><li><strong>IDE</strong>（Integrated Development Environment）: 用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具，本《手册》泛指 IntelliJ IDEA和 eclipse。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java开发手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里巴巴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/11/09/2023-11-9-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/11/09/2023-11-9-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/cat.css"/>
      <url>/css/cat.css</url>
      
        <content type="html"><![CDATA[/* 猫猫挂绳 */body::-webkit-scrollbar {    width: 0;}.neko {    width: 64px;    height: 64px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");    position: absolute;    right: 32px;    background-repeat: no-repeat;    background-size: contain;    transform: translateX(50%);    cursor: pointer;    font-family: tzy;    font-weight: 600;    font-size: 16px;    color: #6f42c1;    display: none;}.neko::after {    display: none;    width: 100px;    height: 100px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");    background-size: contain;    z-index: 9999;    position: absolute;    right: 50%;    text-align: center;    line-height: 100px;    top: -115%;}.neko.showMsg::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko:hover::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko.fontColor::after {    color: #333;}/** * @description: 滚动条样式  跟猫二选一 */@media screen and (max-width:992px) {    ::-webkit-scrollbar {        width: 8px !important;        height: 8px !important    }    ::-webkit-scrollbar-track {        border-radius: 2em;    }    ::-webkit-scrollbar-thumb {        background-color: rgb(255 255 255 / .3);        background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);        border-radius: 2em    }    ::-webkit-scrollbar-corner {        background-color: transparent    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/* 隐藏原有分类start *//* #content-inner #page .category-lists {  display: none;} *//* 隐藏原有分类end *//* 听话的鼠标 */body {    cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur),        default;}a,img {    cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur),        default;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}/* 帧率检测 */#fps {  position: fixed;  /* 指定位置 */  right: 10px;  bottom: 5px;  z-index: 1919810;}[data-theme="light"] #fps {  background-color: rgba(255, 255, 255, 0.85);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}[data-theme="dark"] #fps {  background-color: rgba(0, 0, 0, 0.72);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}/* 右键菜单 */#rightMenu {  display: none;  position: fixed;  width: 160px;  height: fit-content;  top: 10%;  left: 10%;    /* 菜单面板背景色 */  background-color: var(--card-bg);    /* 菜单面板文字颜色 */  border: 1px solid var(--font-color);  border-radius: 8px;  z-index: 100;}#rightMenu .rightMenu-group {  padding: 7px 6px;}#rightMenu .rightMenu-group:not(:nth-last-child(1)) {  border-bottom: 1px solid var(--font-color);}#rightMenu .rightMenu-group.rightMenu-small {  display: flex;  justify-content: space-between;}#rightMenu .rightMenu-group .rightMenu-item {  height: 30px;  line-height: 30px;  border-radius: 8px;  transition: 0.3s;  color: var(--font-color);}#rightMenu .rightMenu-group.rightMenu-line .rightMenu-item {  display: flex;  height: 40px;  line-height: 40px;  padding: 0 4px;}#rightMenu .rightMenu-group .rightMenu-item:hover {    /* 鼠标悬浮选项颜色 */  background-color: var(--text-bg-hover);}#rightMenu .rightMenu-group .rightMenu-item i {  display: inline-block;  text-align: center;  line-height: 30px;  width: 30px;  height: 30px;  padding: 0 5px;}#rightMenu .rightMenu-group .rightMenu-item span {  line-height: 30px;}#rightMenu .rightMenu-group.rightMenu-line .rightMenu-item * {  height: 40px;  line-height: 40px;}.rightMenu-group.hide {  display: none;}:root {  --ichika-color: #49A6E9;}/* 公告&欢迎页 */.card-announcement {  line-height:30px;  font-size:16px;}.card-announcement .item-headline span{  margin-left:0!important;}.card-announcement span{  font-weight:bold;  font-size:20px!important;  color:var(--ichika-color);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/nav.css"/>
      <url>/css/nav.css</url>
      
        <content type="html"><![CDATA[/* 导航栏做居中处理 */#nav-right{    flex:1 1 auto;    justify-content: flex-end;    margin-left: auto;    display: flex;    flex-wrap:nowrap;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.min.css"/>
      <url>/css/runtime.min.css</url>
      
        <content type="html"><![CDATA[/*电子钟字体*/@font-face {    font-family: 'UnidreamLED';    src: url("https://cdn.jsdelivr.net/npm/akilar-candyassets/fonts/UnidreamLED.ttf");    font-display: swap;  }  div#runtime {    width: 180px;    margin: auto;    color: #fff;    padding-inline: 5px;    border-radius: 10px;    background-color: rgba(0,0,0,0.7);    font-family: 'UnidreamLED';  }  [data-theme="dark"] div#runtime {    color: #28b4c8;    box-shadow: 0 0 5px rgba(28,69,218,0.71);    animation: flashlight 1s linear infinite alternate;  }  /*悬停显示徽标提示语*/  a.github-badge:hover:before {    position: fixed;    width: fit-content;    margin: auto;    left: 0;    right: 0;    top: 10%;    border-radius: 10px;    text-align: center;    z-index: 100;    content: attr(data-title);    font-size: 20px;    color: #fff;    padding: 10px;    background-color: var(--text-bg-hover);  }  [data-theme=dark] a.github-badge:hover:before {    background-color: rgba(18,18,18,0.8);  }  @-moz-keyframes flashlight {    from {      box-shadow: 0 0 5px #1478d2;    }    to {      box-shadow: 0 0 2px #1478d2;    }  }  @-webkit-keyframes flashlight {    from {      box-shadow: 0 0 5px #1478d2;    }    to {      box-shadow: 0 0 2px #1478d2;    }  }  @-o-keyframes flashlight {    from {      box-shadow: 0 0 5px #1478d2;    }    to {      box-shadow: 0 0 2px #1478d2;    }  }  @keyframes flashlight {    from {      box-shadow: 0 0 5px #1478d2;    }    to {      box-shadow: 0 0 2px #1478d2;    }  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cat.js"/>
      <url>/js/cat.js</url>
      
        <content type="html"><![CDATA[// 猫猫挂绳if (document.body.clientWidth > 992) {    function getBasicInfo() {        /* 窗口高度 */        var ViewH = $(window).height();        /* document高度 */        var DocH = $("body")[0].scrollHeight;        /* 滚动的高度 */        var ScrollTop = $(window).scrollTop();        /* 可滚动的高度 */        var S_V = DocH - ViewH;        var Band_H = ScrollTop / (DocH - ViewH) * 100;        return {            ViewH: ViewH,            DocH: DocH,            ScrollTop: ScrollTop,            Band_H: Band_H,            S_V: S_V        }    };    function show(basicInfo) {        if (basicInfo.ScrollTop > 0.001) {            $(".neko").css('display', 'block');        } else {            $(".neko").css('display', 'none');        }    }    (function ($) {        $.fn.nekoScroll = function (option) {            var defaultSetting = {                top: '0',                scroWidth: 6 + 'px',                z_index: 9999,                zoom: 0.9,                borderRadius: 5 + 'px',                right: 60 + 'px',                // 这里可以换为你喜欢的图片，例如我就换为了雪人，但是要抠图                nekoImg: "https://bu.dusays.com/2022/07/20/62d812db74be9.png",                hoverMsg: "喵喵喵~",                color: "#6f42c1",                during: 500,                blog_body: "body",            };            var setting = $.extend(defaultSetting, option);            var getThis = this.prop("className") !== "" ? "." + this.prop("className") : this.prop("id") !== "" ? "#" +                this.prop("id") : this.prop("nodeName");            if ($(".neko").length == 0) {                this.after("<div class=\"neko\" id=" + setting.nekoname + " data-msg=\"" + setting.hoverMsg + "\"></div>");            }            let basicInfo = getBasicInfo();            $(getThis)                .css({                    'position': 'fixed',                    'width': setting.scroWidth,                    'top': setting.top,                    'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                    'z-index': setting.z_index,                    'background-color': setting.bgcolor,                    "border-radius": setting.borderRadius,                    'right': setting.right,                    'background-image': 'url(' + setting.scImg + ')',                    'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                    'background-size': 'contain'                });            $("#" + setting.nekoname)                .css({                    'position': 'fixed',                    'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                    'z-index': setting.z_index * 10,                    'right': setting.right,                    'background-image': 'url(' + setting.nekoImg + ')',                });            show(getBasicInfo());            $(window)                .scroll(function () {                    let basicInfo = getBasicInfo();                    show(basicInfo);                    $(getThis)                        .css({                            'position': 'fixed',                            'width': setting.scroWidth,                            'top': setting.top,                            'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                            'z-index': setting.z_index,                            'background-color': setting.bgcolor,                            "border-radius": setting.borderRadius,                            'right': setting.right,                            'background-image': 'url(' + setting.scImg + ')',                            'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                            'background-size': 'contain'                        });                    $("#" + setting.nekoname)                        .css({                            'position': 'fixed',                            'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                            'z-index': setting.z_index * 10,                            'right': setting.right,                            'background-image': 'url(' + setting.nekoImg + ')',                        });                    if (basicInfo.ScrollTop == basicInfo.S_V) {                        $("#" + setting.nekoname)                            .addClass("showMsg")                    } else {                        $("#" + setting.nekoname)                            .removeClass("showMsg");                        $("#" + setting.nekoname)                            .attr("data-msg", setting.hoverMsg);                    }                });            this.click(function (e) {                btf.scrollToDest(0, 500)            });            $("#" + setting.nekoname)                .click(function () {                    btf.scrollToDest(0, 500)                });            return this;        }    })(jQuery);    $(document).ready(function () {        //部分自定义        $("#myscoll").nekoScroll({            bgcolor: 'rgb(255 255 255 / .5)', //背景颜色，没有绳子背景图片时有效            borderRadius: '2em',            zoom: 0.9        }        );        //自定义（去掉以下注释，并注释掉其他的查看效果）        /*        $("#myscoll").nekoScroll({            nekoname:'neko1', //nekoname，相当于id            nekoImg:'img/猫咪.png', //neko的背景图片            scImg:"img/绳1.png", //绳子的背景图片            bgcolor:'#1e90ff', //背景颜色，没有绳子背景图片时有效            zoom:0.9, //绳子长度的缩放值            hoverMsg:'你好~喵', //鼠标浮动到neko上方的对话框信息            right:'100px', //距离页面右边的距离            fontFamily:'楷体', //对话框字体            fontSize:'14px', //对话框字体的大小            color:'#1e90ff', //对话框字体颜色            scroWidth:'8px', //绳子的宽度            z_index:100, //不用解释了吧            during:1200, //从顶部到底部滑动的时长        });        */    })}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/fps.js"/>
      <url>/js/fps.js</url>
      
        <content type="html"><![CDATA[if (window.localStorage.getItem("fpson") == undefined || window.localStorage.getItem("fpson") == "1") {    var rAF = function () {        return (            window.requestAnimationFrame ||            window.webkitRequestAnimationFrame ||            function (callback) {                window.setTimeout(callback, 1000 / 60);            }        );    }();    var frame = 0;    var allFrameCount = 0;    var lastTime = Date.now();    var lastFameTime = Date.now();    var loop = function () {        var now = Date.now();        var fs = (now - lastFameTime);        var fps = Math.round(1000 / fs);        lastFameTime = now;        // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS        allFrameCount++;        frame++;        if (now > 1000 + lastTime) {            var fps = Math.round((frame * 1000) / (now - lastTime));            if (fps <= 5) {                var kd = `<span style="color:#bd0000">卡成ppt🤢</span>`            } else if (fps <= 15) {                var kd = `<span style="color:red">电竞级帧率😖</span>`            } else if (fps <= 25) {                var kd = `<span style="color:orange">有点难受😨</span>`            } else if (fps < 35) {                var kd = `<span style="color:#9338e6">不太流畅🙄</span>`            } else if (fps <= 45) {                var kd = `<span style="color:#08b7e4">还不错哦😁</span>`            } else {                var kd = `<span style="color:#39c5bb">十分流畅🤣</span>`            }            document.getElementById("fps").innerHTML = `FPS:${fps} ${kd}`;            frame = 0;            lastTime = now;        };        rAF(loop);    }    loop();} else {    document.getElementById("fps").style = "display:none!important"}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/rightmenu.js"/>
      <url>/js/rightmenu.js</url>
      
        <content type="html"><![CDATA[function setMask() {    //设置遮罩    if (document.getElementsByClassName("rmMask")[0] != undefined)        return document.getElementsByClassName("rmMask")[0];    mask = document.createElement('div');    mask.className = "rmMask";    mask.style.width = window.innerWidth + 'px';    mask.style.height = window.innerHeight + 'px';    mask.style.background = '#fff';    mask.style.opacity = '.0';    mask.style.position = 'fixed';    mask.style.top = '0';    mask.style.left = '0';    mask.style.zIndex = 998;    document.body.appendChild(mask);    document.getElementById("rightMenu").style.zIndex = 19198;    return mask;}function insertAtCursor(myField, myValue) {    //IE 浏览器    if (document.selection) {        myField.focus();        sel = document.selection.createRange();        sel.text = myValue;        sel.select();    }    //FireFox、Chrome等    else if (myField.selectionStart || myField.selectionStart == '0') {        var startPos = myField.selectionStart;        var endPos = myField.selectionEnd;        // 保存滚动条        var restoreTop = myField.scrollTop;        myField.value = myField.value.substring(0, startPos) + myValue + myField.value.substring(endPos, myField.value.length);        if (restoreTop > 0) {            myField.scrollTop = restoreTop;        }        myField.focus();        myField.selectionStart = startPos + myValue.length;        myField.selectionEnd = startPos + myValue.length;    } else {        myField.value += myValue;        myField.focus();    }}let rmf = {};rmf.showRightMenu = function (isTrue, x = 0, y = 0) {    let $rightMenu = $('#rightMenu');    $rightMenu.css('top', x + 'px').css('left', y + 'px');    if (isTrue) {        $rightMenu.show();    } else {        $rightMenu.hide();    }}rmf.copyWordsLink = function () {    let url = window.location.href    let txa = document.createElement("textarea");    txa.value = url;    document.body.appendChild(txa)    txa.select();    document.execCommand("Copy");    document.body.removeChild(txa);}rmf.switchReadMode = function () {    const $body = document.body    $body.classList.add('read-mode')    const newEle = document.createElement('button')    newEle.type = 'button'    newEle.className = 'fas fa-sign-out-alt exit-readmode'    $body.appendChild(newEle)    function clickFn() {        $body.classList.remove('read-mode')        newEle.remove()        newEle.removeEventListener('click', clickFn)    }    newEle.addEventListener('click', clickFn)}//复制选中文字rmf.copySelect = function () {    document.execCommand('Copy', false, null);}//回到顶部rmf.scrollToTop = function () {    document.getElementsByClassName("menus_items")[1].setAttribute("style", "");    document.getElementById("name-container").setAttribute("style", "display:none");    btf.scrollToDest(0, 500);}document.body.addEventListener('touchmove', function () {}, { passive: false });function popupMenu() {    window.oncontextmenu = function (event) {        // if (event.ctrlKey) return true;        // 当关掉自定义右键时候直接返回        if (mouseMode == "off") return true;        $('.rightMenu-group.hide').hide();        if (document.getSelection().toString()) {            $('#menu-text').show();        }        if (document.getElementById('post')) {            $('#menu-post').show();        } else {            if (document.getElementById('page')) {                $('#menu-post').show();            }        }        var el = window.document.body;        el = event.target;        var a = /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\*\+,;=.]+$/        if (a.test(window.getSelection().toString()) && el.tagName != "A") {            $('#menu-too').show()        }        if (el.tagName == 'A') {            $('#menu-to').show()            rmf.open = function () {                if (el.href.indexOf("http://") == -1 && el.href.indexOf("https://") == -1 || el.href.indexOf("yisous.xyz") != -1) {                    pjax.loadUrl(el.href)                }                else {                    location.href = el.href                }            }            rmf.openWithNewTab = function () {                window.open(el.href);                // window.location.reload();            }            rmf.copyLink = function () {                let url = el.href                let txa = document.createElement("textarea");                txa.value = url;                document.body.appendChild(txa)                txa.select();                document.execCommand("Copy");                document.body.removeChild(txa);            }        } else if (el.tagName == 'IMG') {            $('#menu-img').show()            rmf.openWithNewTab = function () {                window.open(el.src);                // window.location.reload();            }            rmf.click = function () {                el.click()            }            rmf.copyLink = function () {                let url = el.src                let txa = document.createElement("textarea");                txa.value = url;                document.body.appendChild(txa)                txa.select();                document.execCommand("Copy");                document.body.removeChild(txa);            }            rmf.saveAs = function () {                var a = document.createElement('a');                var url = el.src;                var filename = url.split("/")[-1];                a.href = url;                a.download = filename;                a.click();                window.URL.revokeObjectURL(url);            }        } else if (el.tagName == "TEXTAREA" || el.tagName == "INPUT") {            $('#menu-paste').show();            rmf.paste = function () {                navigator.permissions                    .query({                        name: 'clipboard-read'                    })                    .then(result => {                        if (result.state == 'granted' || result.state == 'prompt') {                            //读取剪贴板                            navigator.clipboard.readText().then(text => {                                console.log(text)                                insertAtCursor(el, text)                            })                        } else {                            Snackbar.show({                                text: '请允许读取剪贴板！',                                pos: 'top-center',                                showAction: false,                            })                        }                    })            }        }        let pageX = event.clientX + 10;        let pageY = event.clientY;        let rmWidth = $('#rightMenu').width();        let rmHeight = $('#rightMenu').height();        if (pageX + rmWidth > window.innerWidth) {            pageX -= rmWidth + 10;        }        if (pageY + rmHeight > window.innerHeight) {            pageY -= pageY + rmHeight - window.innerHeight;        }        mask = setMask();        // 滚动消失的代码和阅读进度有冲突，因此放到readPercent.js里面了        $(".rightMenu-item").click(() => {            $('.rmMask').attr('style', 'display: none');        })        $(window).resize(() => {            rmf.showRightMenu(false);            $('.rmMask').attr('style', 'display: none');        })        mask.onclick = () => {            $('.rmMask').attr('style', 'display: none');        }        rmf.showRightMenu(true, pageY, pageX);        $('.rmMask').attr('style', 'display: flex');        return false;    };    window.addEventListener('click', function () {        rmf.showRightMenu(false);    });}if (!(navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {    popupMenu()}const box = document.documentElementfunction addLongtabListener(target, callback) {    let timer = 0 // 初始化timer    target.ontouchstart = () => {        timer = 0 // 重置timer        timer = setTimeout(() => {            callback();            timer = 0        }, 380) // 超时器能成功执行，说明是长按    }    target.ontouchmove = () => {        clearTimeout(timer) // 如果来到这里，说明是滑动        timer = 0    }    target.ontouchend = () => { // 到这里如果timer有值，说明此触摸时间不足380ms，是点击        if (timer) {            clearTimeout(timer)        }    }}addLongtabListener(box, popupMenu)// 全屏rmf.fullScreen = function () {    if (document.fullscreenElement) document.exitFullscreen();    else document.documentElement.requestFullscreen();}// 右键开关if (localStorage.getItem("mouse") == undefined) {    localStorage.setItem("mouse", "on");}var mouseMode = localStorage.getItem("mouse");function changeMouseMode() {    if (localStorage.getItem("mouse") == "on") {        mouseMode = "off";        localStorage.setItem("mouse", "off");        debounce(function () {            new Vue({                data: function () {                    this.$notify({                        title: "切换右键模式成功🍔",                        message: "当前鼠标右键已恢复为系统默认！",                        position: 'top-left',                        offset: 50,                        showClose: true,                        type: "success",                        duration: 5000                    });                }            })        }, 300);    } else {        mouseMode = "on";        localStorage.setItem("mouse", "on");        debounce(function () {            new Vue({                data: function () {                    this.$notify({                        title: "切换右键模式成功🍔",                        message: "当前鼠标右键已更换为网站指定样式！",                        position: 'top-left',                        offset: 50,                        showClose: true,                        type: "success",                        duration: 5000                    });                }            })        }, 300);    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/txmap.js"/>
      <url>/js/txmap.js</url>
      
        <content type="html"><![CDATA[//get请求$.ajax({    type: 'get',    url: 'https://apis.map.qq.com/ws/location/v1/ip',    data: {        key: 'Z7YBZ-ESPKQ-FBE5H-4PXJN-EZZ5O-MEBWF',        output: 'jsonp',    },    dataType: 'jsonp',    success: function (res) {        ipLoacation = res;    }})//根据自己的需求定制function showWelcome() {    if (!document.getElementById("welcome-info")) return    let dist = getDistance(120.57186, 31.29579, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里记录你自己的经纬度    let pos = ipLoacation.result.ad_info.nation;    let posdesc;    //根据国家、省份、城市信息自定义欢迎语    //海外地区不支持省份及城市信息    switch (ipLoacation.result.ad_info.nation) {        case "日本":            posdesc = "よろしく，一起去看樱花吗";            break;        case "美国":            posdesc = "Make America Great Again!";            break;        case "英国":            posdesc = "想同你一起夜乘伦敦眼";            break;        case "俄罗斯":            posdesc = "干了这瓶伏特加！";            break;        case "法国":            posdesc = "C'est La Vie";            break;        case "德国":            posdesc = "Die Zeit verging im Fluge.";            break;        case "澳大利亚":            posdesc = "一起去大堡礁吧！";            break;        case "加拿大":            posdesc = "拾起一片枫叶赠予你";            break;        case "中国":            pos = ipLoacation.result.ad_info.province + " " + ipLoacation.result.ad_info.city;            switch (ipLoacation.result.ad_info.province) {                case "北京市":                    pos = "北京市";                    posdesc = "北——京——欢迎你~~~";                    break;                case "天津市":                    pos = "天津市";                    posdesc = "讲段相声吧。";                    break;                case "重庆市":                    pos = "重庆市";                    posdesc = "高德地图:已到达重庆，下面交给百度地图导航。"                    break;                case "河北省":                    posdesc = "山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。";                    break;                case "山西省":                    posdesc = "展开坐具长三尺，已占山河五百余。";                    break;                case "内蒙古自治区":                    posdesc = "天苍苍，野茫茫，风吹草低见牛羊。";                    break;                case "辽宁省":                    posdesc = "我想吃烤鸡架！";                    break;                case "吉林省":                    posdesc = "状元阁就是东北烧烤之王。";                    break;                case "黑龙江省":                    posdesc = "很喜欢哈尔滨大剧院。";                    break;                case "上海市":                    pos = "上海市";                    posdesc = "众所周知，中国只有两个城市。";                    break;                case "江苏省":                    switch (ipLoacation.result.ad_info.city) {                        case "南京市":                            posdesc = "欢迎来自安徽省南京市的小伙伴。";                            break;                        case "苏州市":                            posdesc = "上有天堂，下有苏杭。";                            break;                        case "泰州市":                            posdesc = "这里也是我的故乡。";                            break;                        default:                            posdesc = "散装是必须要散装的。";                            break;                    }                    break;                case "浙江省":                    posdesc = "东风渐绿西湖柳，雁已还人未南归。";                    break;                case "安徽省":                    posdesc = "蚌埠住了，芜湖起飞。";                    break;                case "福建省":                    posdesc = "井邑白云间，岩城远带山。";                    break;                case "江西省":                    posdesc = "落霞与孤鹜齐飞，秋水共长天一色。";                    break;                case "山东省":                    posdesc = "遥望齐州九点烟，一泓海水杯中泻。";                    break;                case "湖北省":                    posdesc = "来碗热干面！";                    break;                case "湖南省":                    posdesc = "74751，长沙斯塔克。";                    break;                case "广东省":                    posdesc = "老板来两斤福建人。";                    break;                case "广西壮族自治区":                    posdesc = "桂林山水甲天下。";                    break;                case "海南省":                    posdesc = "朝观日出逐白浪，夕看云起收霞光。";                    break;                case "四川省":                    posdesc = "康康川妹子。";                    break;                case "贵州省":                    posdesc = "茅台，学生，再塞200。";                    break;                case "云南省":                    posdesc = "玉龙飞舞云缠绕，万仞冰川直耸天。";                    break;                case "西藏自治区":                    posdesc = "躺在茫茫草原上，仰望蓝天。";                    break;                case "陕西省":                    posdesc = "来份臊子面加馍。";                    break;                case "甘肃省":                    posdesc = "羌笛何须怨杨柳，春风不度玉门关。";                    break;                case "青海省":                    posdesc = "牛肉干和老酸奶都好好吃。";                    break;                case "宁夏回族自治区":                    posdesc = "大漠孤烟直，长河落日圆。";                    break;                case "新疆维吾尔自治区":                    posdesc = "驼铃古道丝绸路，胡马犹闻唐汉风。";                    break;                case "台湾省":                    posdesc = "我在这头，大陆在那头。";                    break;                case "香港特别行政区":                    pos = "香港特别行政区";                    posdesc = "永定贼有残留地鬼嚎，迎击光非岁玉。";                    break;                case "澳门特别行政区":                    pos = "澳门特别行政区";                    posdesc = "性感荷官，在线发牌。";                    break;                default:                    posdesc = "社会主义大法好。";                    break;            }            break;        default:            posdesc = "带我去你的国家逛逛吧。";            break;    }    //判断时间    let timeChange;    let date = new Date();    if (date.getHours()>= 5 && date.getHours() < 11) timeChange = "<span>上午好</span>，一日之计在于晨";    else if (date.getHours()>= 1 && date.getHours() < 13) timeChange = "<span>中午好</span>，该摸鱼吃午饭了";    else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = "<span>下午好</span>，懒懒地睡个午觉吧！";    else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = "<span>三点几啦</span>，饮茶先啦！";    else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = "<span>夕阳无限好！</span>";    else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = "<span>晚上好</span>，夜生活嗨起来！";    else timeChange = "夜深了，早点休息，少熬夜";    //自定义文本需要放的位置    document.getElementById("welcome-info").innerHTML = `欢迎来自<span>${pos}</span>的小伙伴，${timeChange}<br>你距离ichika约有<span>${dist}</span>公里，${posdesc}`;}// window.onload = showWelcome;// // 如果使用了pjax在加上下面这行代码// document.addEventListener('pjax:complete', showWelcome);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date;function createtime() {    now.setTime(now.getTime() + 1e3);    var e = new Date("11/01/2023 00:00:00"), t = Math.trunc(234e8 + (now - e) / 1e3 * 17), a = (t / 1496e5).toFixed(6),        o = new Date("11/01/2023 00:00:00"), n = (now - o) / 1e3 / 60 / 60 / 24, r = Math.floor(n),        i = (now - o) / 1e3 / 60 / 60 - 24 * r, s = Math.floor(i);    1 == String(s).length && (s = "0" + s);    var d = (now - o) / 1e3 / 60 - 1440 * r - 60 * s, l = Math.floor(d);    1 == String(l).length && (l = "0" + l);    var g = (now - o) / 1e3 - 86400 * r - 3600 * s - 60 * l, b = Math.round(g);    1 == String(b).length && (b = "0" + b);    let c = "";    c = s < 18 && s >= 9 ?     `     <img class='boardsign'      src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'>     <br>      <div style="font-size:14px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒      <i id="heartbeat" class='fas fa-heartbeat'></i>      <br>      旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>` :      `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'>     <br>      <div style="font-size:14px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒      <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`,      document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = c)}// `<br>// <div style="font-size:18px;font-weight:bold">You are back it with all the good things in the world. // <i id="heartbeat" class='fas fa-heartbeat'></i> // <br> // 你逆光而来，配得上这世间所有的好</div>`setInterval((() => {    createtime()}), 1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/sun_moon.js"/>
      <url>/js/sun_moon.js</url>
      
        <content type="html"><![CDATA[function switchNightMode() {    document.querySelector('body').insertAdjacentHTML('beforeend', '<div class="Cuteen_DarkSky"><div class="Cuteen_DarkPlanet"><div id="sun"></div><div id="moon"></div></div></div>'),        setTimeout(function () {            document.querySelector('body').classList.contains('DarkMode') ? (document.querySelector('body').classList.remove('DarkMode'), localStorage.setItem('isDark', '0'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-moon')) : (document.querySelector('body').classList.add('DarkMode'), localStorage.setItem('isDark', '1'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-sun')),                setTimeout(function () {                    document.getElementsByClassName('Cuteen_DarkSky')[0].style.transition = 'opacity 3s';                    document.getElementsByClassName('Cuteen_DarkSky')[0].style.opacity = '0';                    setTimeout(function () {                        document.getElementsByClassName('Cuteen_DarkSky')[0].remove();                    }, 1e3);                }, 2e3)        })    const nowMode = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light'    if (nowMode === 'light') {        // 先设置太阳月亮透明度        document.getElementById("sun").style.opacity = "1";        document.getElementById("moon").style.opacity = "0";        setTimeout(function () {            document.getElementById("sun").style.opacity = "0";            document.getElementById("moon").style.opacity = "1";        }, 1000);        activateDarkMode()        saveToLocal.set('theme', 'dark', 2)        // GLOBAL_CONFIG.Snackbar !== undefined && btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)        document.getElementById('modeicon').setAttribute('xlink:href', '#icon-sun')        // 延时弹窗提醒        setTimeout(() => {            new Vue({                data: function () {                    this.$notify({                        title: "关灯啦🌙",                        message: "当前已成功切换至夜间模式！",                        position: 'top-left',                        offset: 50,                        showClose: true,                        type: "success",                        duration: 5000                    });                }            })        }, 2000)    } else {        // 先设置太阳月亮透明度        document.getElementById("sun").style.opacity = "0";        document.getElementById("moon").style.opacity = "1";        setTimeout(function () {            document.getElementById("sun").style.opacity = "1";            document.getElementById("moon").style.opacity = "0";        }, 1000);                activateLightMode()        saveToLocal.set('theme', 'light', 2)        document.querySelector('body').classList.add('DarkMode'), document.getElementById('modeicon').setAttribute('xlink:href', '#icon-moon')        setTimeout(() => {            new Vue({                data: function () {                    this.$notify({                        title: "开灯啦🌞",                        message: "当前已成功切换至白天模式！",                        position: 'top-left',                        offset: 50,                        showClose: true,                        type: "success",                        duration: 5000                    });                }            })        }, 2000)    }    // handle some cases    typeof utterancesTheme === 'function' && utterancesTheme()    typeof FB === 'object' && window.loadFBComment()    window.DISQUS && document.getElementById('disqus_thread').children.length && setTimeout(() => window.disqusReset(), 200)}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
